// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
// Author: Fabian Schuiki <zarubaf@iis.ee.ethz.ch>
//
// AUTOMATICALLY GENERATED by genoccamy.py; edit the script instead.
// verilog_lint: waive-start line-length

`include "common_cells/registers.svh"
`include "occamy/unpack.svh"

module occamy_top
  import occamy_pkg::*;
(
  input  logic clk_i,
  input  logic rst_ni,
  input  logic test_mode_i,
  /// PCIe Ports
  output  ${soc_wide_xbar.out_pcie.req_type()} pcie_axi_req_o,
  input   ${soc_wide_xbar.out_pcie.rsp_type()} pcie_axi_rsp_i,

  input  ${soc_wide_xbar.out_pcie.req_type()} pcie_axi_req_i,
  output ${soc_wide_xbar.out_pcie.rsp_type()} pcie_axi_rsp_o
  /// HBM2e Ports
  /// HBI Ports
);

  addr_t [${nr_s1_quadrants-1}:0] s1_quadrant_base_addr;
  % for i in range(nr_s1_quadrants):
  assign s1_quadrant_base_addr[${i}] = ClusterBaseOffset + ${i} * S1QuadrantAddressSpace;
  % endfor

  ///////////////////
  //   CROSSBARS   //
  ///////////////////
  ${module}

  /////////////////////////////
  // Narrow to Wide Crossbar //
  /////////////////////////////
  <% soc_narrow_xbar.out_soc_wide \
        .change_iw(context, 3, "soc_narrow_wide_iwc") \
        .change_dw(context, 512, "soc_narrow_wide_dw", to=soc_wide_xbar.in_soc_narrow)
  %>

  /////////////////
  // Peripherals //
  /////////////////
  <% soc_narrow_xbar.out_periph.to_axi_lite(context, "soc_narrow_periph", to=soc_periph_xbar.in_soc) %>

  //////////
  // PCIe //
  //////////
  assign pcie_axi_req_o = ${soc_wide_xbar.out_pcie.req_name()};
  assign ${soc_wide_xbar.out_pcie.rsp_name()} = pcie_axi_rsp_i;
  assign ${soc_wide_xbar.in_pcie.req_name()} = pcie_axi_req_i;
  assign pcie_axi_rsp_o = ${soc_wide_xbar.in_pcie.rsp_name()};


  % for i in range(nr_s1_quadrants):
  ////////////////////
  // S1 Quadrants ${i} //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_${i} (
    .clk_i (clk_i),
    .rst_ni (rst_ni),
    .test_mode_i (test_mode_i),
    .tile_id_i (6'd${i}),
    .debug_req_i ('0),
    .meip_i ('0),
    .mtip_i ('0),
    .msip_i ('0),
    .quadrant_narrow_out_req_o (${soc_narrow_xbar.__dict__["in_s1_quadrant_{}".format(i)].req_name()}),
    .quadrant_narrow_out_rsp_i (${soc_narrow_xbar.__dict__["in_s1_quadrant_{}".format(i)].rsp_name()}),
    .quadrant_narrow_in_req_i (${soc_narrow_xbar.__dict__["out_s1_quadrant_{}".format(i)].req_name()}),
    .quadrant_narrow_in_rsp_o (${soc_narrow_xbar.__dict__["out_s1_quadrant_{}".format(i)].rsp_name()}),
    .quadrant_wide_out_req_o (${soc_wide_xbar.__dict__["in_s1_quadrant_{}".format(i)].req_name()}),
    .quadrant_wide_out_rsp_i (${soc_wide_xbar.__dict__["in_s1_quadrant_{}".format(i)].rsp_name()}),
    .quadrant_wide_in_req_i (${soc_wide_xbar.__dict__["out_s1_quadrant_{}".format(i)].req_name()}),
    .quadrant_wide_in_rsp_o (${soc_wide_xbar.__dict__["out_s1_quadrant_{}".format(i)].rsp_name()})
  );

  % endfor

endmodule
// verilog_lint: waive-off line-length
