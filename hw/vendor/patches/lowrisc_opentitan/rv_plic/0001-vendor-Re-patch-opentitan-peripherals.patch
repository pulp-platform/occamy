From c997eca4b023d9ab6f419678155f61bfaef66caf Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Wed, 18 Aug 2021 17:42:18 +0200
Subject: [PATCH] vendor: Re-patch opentitan peripherals

---
 Bender.yml             | 11 +++++++++++
 data/rv_plic.hjson.tpl | 32 +++++++++++++++++-------------
 data/rv_plic.sv.tpl    | 53 ++++++++++++--------------------------------------
 rtl/rv_plic_target.sv  |  2 +-
 4 files changed, 42 insertions(+), 56 deletions(-)
 create mode 100644 hw/vendor/lowrisc_opentitan/rv_plic/Bender.yml

diff --git a/Bender.yml b/Bender.yml
new file mode 100644
index 0000000..fc2a332
--- /dev/null
+++ b/Bender.yml
@@ -0,0 +1,11 @@
+package:
+  name: lowrisc_rv_plic
+  description: "lowRISC RISC-V Platform Level Interrupt Controller"
+  authors: ["lowRISC Contributors"]
+
+dependencies:
+  lowrisc_prim: {path: ../prim}
+
+sources:
+- rtl/rv_plic_gateway.sv
+- rtl/rv_plic_target.sv
diff --git a/data/rv_plic.hjson.tpl b/data/rv_plic.hjson.tpl
index 9423cfe..27d51cf 100644
--- a/data/rv_plic.hjson.tpl
+++ b/data/rv_plic.hjson.tpl
@@ -11,9 +11,9 @@
 #  - prio:   Max value of interrupt priorities
 {
   name: "RV_PLIC",
-  clocking: [{clock: "clk_i", reset: "rst_ni"}],
+  clock_primary: "clk_i",
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
 
   param_list: [
@@ -75,6 +75,17 @@
 
   regwidth: "32",
   registers: [
+% for i in range(src):
+    { name: "PRIO${i}",
+      desc: "Interrupt Source ${i} Priority",
+      swaccess: "rw",
+      hwaccess: "hro",
+      fields: [
+        { bits: "${(prio).bit_length()-1}:0" }
+      ],
+    },
+% endfor
+    { skipto: "0x1000" }
     { multireg: {
         name: "IP",
         desc: "Interrupt Pending",
@@ -101,18 +112,8 @@
         ],
       }
     },
-% for i in range(src):
-    { name: "PRIO${i}",
-      desc: "Interrupt Source ${i} Priority",
-      swaccess: "rw",
-      hwaccess: "hro",
-      fields: [
-        { bits: "${(prio).bit_length()-1}:0" }
-      ],
-    }
-% endfor
 % for i in range(target):
-    { skipto: "${0x100*(math.ceil((src*4+8*math.ceil(src/32))/0x100)) + i*0x100 | x}" }
+    { skipto: "${0x2000 + i * 0x80}" }
     { multireg: {
         name: "IE${i}",
         desc: "Interrupt Enable for Target ${i}",
@@ -125,6 +126,9 @@
         ],
       }
     }
+% endfor
+% for i in range(target):
+    { skipto: "${0x200000 + 0x1000 * i}" }
     { name: "THRESHOLD${i}",
       desc: "Threshold of priority for Target ${i}",
       swaccess: "rw",
@@ -159,7 +163,7 @@
       ],
     }
 % endfor
-  { skipto: "${0x100*(math.ceil((src*4+8*math.ceil(src/32))/0x100)) + target*0x100 | x}" }
+  { skipto: "${0x200000 + target*0x1000  | x}" }
   { name: "ALERT_TEST",
       desc: '''Alert Test Register.''',
       swaccess: "wo",
diff --git a/data/rv_plic.sv.tpl b/data/rv_plic.sv.tpl
index 6c14362..4af2c2a 100644
--- a/data/rv_plic.sv.tpl
+++ b/data/rv_plic.sv.tpl
@@ -14,8 +14,11 @@
 // Verilog parameter
 //   MAX_PRIO: Maximum value of interrupt priority
 
+`include "common_cells/assertions.svh"
+
 module rv_plic import rv_plic_reg_pkg::*; #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}},
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic,
   // derived parameter
   localparam int SRCW    = $clog2(NumSrc)
 ) (
@@ -23,16 +26,12 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   input     rst_ni,
 
   // Bus Interface (device)
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Interrupt Sources
   input  [NumSrc-1:0] intr_src_i,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Interrupt notification to targets
   output [NumTarget-1:0] irq_o,
   output [SRCW-1:0]      irq_id_o [NumTarget],
@@ -185,56 +184,28 @@ module rv_plic import rv_plic_reg_pkg::*; #(
     );
   end
 
-  ////////////
-  // Alerts //
-  ////////////
-
-  logic [NumAlerts-1:0] alert_test, alerts;
-
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   ////////////////////////
   // Register interface //
   ////////////////////////
   //  Limitation of register tool prevents the module from having flexibility to parameters
   //  So, signals are manually tied at the top.
-  rv_plic_reg_top u_reg (
+  rv_plic_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
 
-    .tl_i,
-    .tl_o,
+    .reg_req_i,
+    .reg_rsp_o,
 
     .reg2hw,
     .hw2reg,
 
-    .intg_err_o(alerts[0]),
-
     .devmode_i  (1'b1)
   );
 
   // Assertions
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
   `ASSERT_KNOWN(IrqKnownO_A, irq_o)
   `ASSERT_KNOWN(MsipKnownO_A, msip_o)
   for (genvar k = 0; k < NumTarget; k++) begin : gen_irq_id_known
diff --git a/rtl/rv_plic_target.sv b/rtl/rv_plic_target.sv
index ded960e..e1f62b9 100644
--- a/rtl/rv_plic_target.sv
+++ b/rtl/rv_plic_target.sv
@@ -12,7 +12,7 @@
 // many input sources.
 //
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module rv_plic_target #(
   parameter int N_SOURCE = 32,
-- 
2.16.5

