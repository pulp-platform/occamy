From 0a449a6b023e3ea1af71ff5d2abf5f270b834120 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Wed, 18 Aug 2021 17:42:18 +0200
Subject: [PATCH 1/2] vendor: Re-patch opentitan peripherals

---
 Bender.yml                     |   24 +
 data/spi_host.hjson            |   12 +-
 rtl/spi_host.sv                |  141 +----
 rtl/spi_host_fsm.sv            |    8 +-
 rtl/spi_host_reg_pkg.sv        |   47 +-
 rtl/spi_host_reg_top.sv        | 1209 +++++++++++++++++++++++-----------------
 rtl/spi_host_shift_register.sv |    4 +-
 rtl/spi_host_window.sv         |   45 +-
 8 files changed, 824 insertions(+), 666 deletions(-)
 create mode 100644 hw/vendor/lowrisc_opentitan/spi_host/Bender.yml

diff --git a/Bender.yml b/Bender.yml
new file mode 100644
index 0000000..d92995b
--- /dev/null
+++ b/Bender.yml
@@ -0,0 +1,24 @@
+package:
+  name: lowrisc_spi_host
+  description: "lowRISC RISC-V Platform Level Interrupt Controller"
+  authors: ["lowRISC Contributors"]
+
+dependencies:
+  lowrisc_prim: {path: ../prim}
+
+sources:
+# Level 0:
+- rtl/spi_host_reg_pkg.sv
+- rtl/spi_host_byte_merge.sv
+- rtl/spi_host_byte_select.sv
+- rtl/spi_host_cmd_pkg.sv
+- rtl/spi_host_command_cdc.sv
+- rtl/spi_host_fsm.sv
+- rtl/spi_host_window.sv
+- rtl/spi_host_data_cdc.sv
+- rtl/spi_host_shift_register.sv
+# Level 1:
+- rtl/spi_host_reg_top.sv
+- rtl/spi_host_core.sv
+# Level 2:
+- rtl/spi_host.sv
diff --git a/data/spi_host.hjson b/data/spi_host.hjson
index 2ecbb5b..b2726f2 100644
--- a/data/spi_host.hjson
+++ b/data/spi_host.hjson
@@ -2,12 +2,12 @@
 // Licensed under the Apache License, Version 2.0, see LICENSE for details.
 // SPDX-License-Identifier: Apache-2.0
 { name: "spi_host",
-  clocking: [
-    {clock: "clk_i", reset: "rst_ni", primary: true},
-    {clock: "clk_core_i", reset: "rst_core_ni"}
-  ]
+  clock_primary: "clk_i",
+  other_clock_list: [ "clk_core_i" ],
+  reset_primary: "rst_ni",
+  other_reset_list: [ "rst_core_ni" ],
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
   inter_signal_list: [
     { struct:  "passthrough",
@@ -34,7 +34,7 @@
     { name: "NumCS",
       desc: "The number of active-low chip select (cs_n) lines to create.",
       type: "int",
-      default: "1"
+      default: "2"
     },
     { name: "TxDepth",
       desc: "The size of the Tx FIFO (in words)",
diff --git a/rtl/spi_host.sv b/rtl/spi_host.sv
index 42ae24c..26e0e61 100644
--- a/rtl/spi_host.sv
+++ b/rtl/spi_host.sv
@@ -6,27 +6,22 @@
 //
 //
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module spi_host
   import spi_host_reg_pkg::*;
 #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
 ) (
   input              clk_i,
   input              rst_ni,
   input              clk_core_i,
   input              rst_core_ni,
 
-  input              lc_ctrl_pkg::lc_tx_t scanmode_i,
-
   // Register interface
-  input              tlul_pkg::tl_h2d_t tl_i,
-  output             tlul_pkg::tl_d2h_t tl_o,
-
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // SPI Interface
   output logic             cio_sck_o,
@@ -37,10 +32,6 @@ module spi_host
   output logic [3:0]       cio_sd_en_o,
   input        [3:0]       cio_sd_i,
 
-  // Passthrough interface
-  input  spi_device_pkg::passthrough_req_t passthrough_i,
-  output spi_device_pkg::passthrough_rsp_t passthrough_o,
-
   output logic             intr_error_o,
   output logic             intr_spi_event_o
 );
@@ -50,118 +41,39 @@ module spi_host
   spi_host_reg2hw_t reg2hw;
   spi_host_hw2reg_t hw2reg;
 
-  tlul_pkg::tl_h2d_t fifo_win_h2d;
-  tlul_pkg::tl_d2h_t fifo_win_d2h;
+  reg_req_t fifo_win_h2d;
+  reg_rsp_t fifo_win_d2h;
 
   // Register module
-  logic [NumAlerts-1:0] alert_test, alerts;
-  spi_host_reg_top u_reg (
+  spi_host_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
-    .tl_i       (tl_i),
-    .tl_o       (tl_o),
-    .tl_win_o   (fifo_win_h2d),
-    .tl_win_i   (fifo_win_d2h),
+    .reg_req_i,
+    .reg_rsp_o,
+    .reg_req_win_o (fifo_win_h2d),
+    .reg_rsp_win_i (fifo_win_d2h),
     .reg2hw,
     .hw2reg,
-    .intg_err_o (alerts[0]),
     .devmode_i  (1'b1)
   );
 
-  // Alerts
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   logic             sck;
   logic [NumCS-1:0] csb;
   logic [3:0]       sd_out;
   logic [3:0]       sd_en;
   logic [3:0]       sd_i;
 
-  if (NumCS == 1) begin : gen_passthrough_implementation
-    logic passthrough_en;
-    assign passthrough_en  = passthrough_i.passthrough_en;
-
-    logic        pt_sck;
-    logic        pt_sck_en;
-    logic [0:0]  pt_csb;
-    logic [0:0]  pt_csb_en;
-    logic [3:0]  pt_sd_out;
-    logic [3:0]  pt_sd_en;
-
-    assign pt_sck       = passthrough_i.sck;
-    assign pt_sck_en    = passthrough_i.sck_en;
-    assign pt_csb[0]    = passthrough_i.csb;
-    assign pt_csb_en[0] = passthrough_i.csb_en;
-    assign pt_sd_out    = passthrough_i.s;
-    assign pt_sd_en     = passthrough_i.s_en;
-
-    assign cio_sck_o    = passthrough_en ? pt_sck    : sck;
-    assign cio_sck_en_o = passthrough_en ? pt_sck_en : 1'b1;
-    assign cio_csb_o    = passthrough_en ? pt_csb    : csb;
-    assign cio_csb_en_o = passthrough_en ? pt_csb_en : 1'b1;
-    assign cio_sd_o     = passthrough_en ? pt_sd_out : sd_out;
-    assign cio_sd_en_o  = passthrough_en ? pt_sd_en  : sd_en;
-
-  end                   : gen_passthrough_implementation
-  else begin            : gen_passthrough_ignore
-     // Passthrough only supported for instances with one CSb line
-    `ASSERT(PassthroughNumCSCompat_A, !passthrough_i.passthrough_en, clk_i, rst_ni)
-
-    assign cio_sck_o    = sck;
-    assign cio_sck_en_o = 1'b1;
-    assign cio_csb_o    = csb;
-    assign cio_csb_en_o = {NumCS{1'b1}};
-    assign cio_sd_o     = sd_out;
-    assign cio_sd_en_o  = sd_en;
-
-    logic       unused_pt_en;
-    logic       unused_pt_sck;
-    logic       unused_pt_sck_en;
-    logic       unused_pt_csb;
-    logic       unused_pt_csb_en;
-    logic [3:0] unused_pt_sd_out;
-    logic [3:0] unused_pt_sd_en;
-
-    assign unused_pt_en     = passthrough_i.passthrough_en;
-    assign unused_pt_sck    = passthrough_i.sck;
-    assign unused_pt_sck_en = passthrough_i.sck_en;
-    assign unused_pt_csb    = passthrough_i.csb;
-    assign unused_pt_csb_en = passthrough_i.csb_en;
-    assign unused_pt_sd_out = passthrough_i.s;
-    assign unused_pt_sd_en  = passthrough_i.s_en;
-
-  end                   : gen_passthrough_ignore
-
-  logic unused_pt_sck_gate_en;
-  assign unused_pt_sck_gate_en = passthrough_i.sck_gate_en;
-
-  assign passthrough_o.s = cio_sd_i;
-  assign sd_i            = cio_sd_i;
+  assign cio_sck_o    = sck;
+  assign cio_sck_en_o = 1'b1;
+  assign cio_csb_o    = csb;
+  assign cio_csb_en_o = {NumCS{1'b1}};
+  assign cio_sd_o     = sd_out;
+  assign cio_sd_en_o  = sd_en;
 
-  // TODO: REMOVE THIS CODE
-  // Temp tie-offs to silence lint warnings
-  logic unused_scan;
-
-  assign unused_scan = ^scanmode_i;
+  assign sd_i            = cio_sd_i;
 
   assign hw2reg.status.byteorder.d  = ByteOrder;
   assign hw2reg.status.byteorder.de = 1'b1;
@@ -308,7 +220,10 @@ module spi_host
   logic        rx_valid;
   logic        rx_ready;
 
-  spi_host_window u_window (
+  spi_host_window #(
+    .reg_req_t  (reg_req_t),
+    .reg_rsp_t  (reg_rsp_t)
+  ) u_window (
     .clk_i,
     .rst_ni,
     .win_i      (fifo_win_h2d),
@@ -597,9 +512,6 @@ module spi_host
   );
 
 
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
-  `ASSERT_KNOWN(AlertKnownO_A, alert_tx_o)
   `ASSERT_KNOWN(CioSckKnownO_A, cio_sck_o)
   `ASSERT_KNOWN(CioSckEnKnownO_A, cio_sck_en_o)
   `ASSERT_KNOWN(CioCsbKnownO_A, cio_csb_o)
@@ -608,6 +520,5 @@ module spi_host
   `ASSERT_KNOWN(CioSdEnKnownO_A, cio_sd_en_o)
   `ASSERT_KNOWN(IntrSpiEventKnownO_A, intr_spi_event_o)
   `ASSERT_KNOWN(IntrErrorKnownO_A, intr_error_o)
-  `ASSERT_KNOWN(PassthroughKnownO_A, passthrough_o)
 
 endmodule : spi_host
diff --git a/rtl/spi_host_fsm.sv b/rtl/spi_host_fsm.sv
index 4e1175d..dfa494a 100644
--- a/rtl/spi_host_fsm.sv
+++ b/rtl/spi_host_fsm.sv
@@ -5,6 +5,8 @@
 // Core Implemenation module for Serial Peripheral Interface (SPI) Host IP.
 //
 
+`include "common_cells/assertions.svh"
+
 module spi_host_fsm
   import spi_host_cmd_pkg::*;
 #(
@@ -489,7 +491,7 @@ module spi_host_fsm
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       sample_en_q <= 1'b0;
-      sample_en_q2 <= 1'b00;
+      sample_en_q2 <= 1'b0;
     end else begin
       sample_en_q  <= (fsm_en && !stall) ? sample_en_d : sample_en_q;
       sample_en_q2 <= (fsm_en && !stall) ? sample_en_q : sample_en_q2;
@@ -516,12 +518,12 @@ module spi_host_fsm
     always_ff @(posedge clk_i or negedge rst_ni) begin
       if (!rst_ni) begin
         csb_q[ii] <= 1'b1;
-        sck_q     <= 1'b0;
+        if (ii == 0) sck_q     <= 1'b0;
       end else begin
         csb_q[ii] <= (csid != ii) ? 1'b1 :
                      !stall       ? csb_single_d :
                      csb_q[ii];
-        sck_q     <= !stall ? sck_d : sck_q;
+        if (ii == 0) sck_q     <= !stall ? sck_d : sck_q;
       end
     end
   end : gen_csb_gen
diff --git a/rtl/spi_host_reg_pkg.sv b/rtl/spi_host_reg_pkg.sv
index 384f5e2..c519d9f 100644
--- a/rtl/spi_host_reg_pkg.sv
+++ b/rtl/spi_host_reg_pkg.sv
@@ -8,7 +8,7 @@ package spi_host_reg_pkg;
 
   // Param list
   parameter logic ByteOrder = 1;
-  parameter int NumCS = 1;
+  parameter int NumCS = 2;
   parameter int TxDepth = 72;
   parameter int RxDepth = 64;
   parameter int NumAlerts = 1;
@@ -264,12 +264,12 @@ package spi_host_reg_pkg;
 
   // Register -> HW type
   typedef struct packed {
-    spi_host_reg2hw_intr_state_reg_t intr_state; // [124:123]
-    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [122:121]
-    spi_host_reg2hw_intr_test_reg_t intr_test; // [120:117]
-    spi_host_reg2hw_alert_test_reg_t alert_test; // [116:115]
-    spi_host_reg2hw_control_reg_t control; // [114:97]
-    spi_host_reg2hw_configopts_mreg_t [0:0] configopts; // [96:66]
+    spi_host_reg2hw_intr_state_reg_t intr_state; // [155:154]
+    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [153:152]
+    spi_host_reg2hw_intr_test_reg_t intr_test; // [151:148]
+    spi_host_reg2hw_alert_test_reg_t alert_test; // [147:146]
+    spi_host_reg2hw_control_reg_t control; // [145:128]
+    spi_host_reg2hw_configopts_mreg_t [1:0] configopts; // [127:66]
     spi_host_reg2hw_csid_reg_t csid; // [65:34]
     spi_host_reg2hw_command_reg_t command; // [33:16]
     spi_host_reg2hw_error_enable_reg_t error_enable; // [15:11]
@@ -291,12 +291,13 @@ package spi_host_reg_pkg;
   parameter logic [BlockAw-1:0] SPI_HOST_ALERT_TEST_OFFSET = 6'h c;
   parameter logic [BlockAw-1:0] SPI_HOST_CONTROL_OFFSET = 6'h 10;
   parameter logic [BlockAw-1:0] SPI_HOST_STATUS_OFFSET = 6'h 14;
-  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_OFFSET = 6'h 18;
-  parameter logic [BlockAw-1:0] SPI_HOST_CSID_OFFSET = 6'h 1c;
-  parameter logic [BlockAw-1:0] SPI_HOST_COMMAND_OFFSET = 6'h 20;
-  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_ENABLE_OFFSET = 6'h 28;
-  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_STATUS_OFFSET = 6'h 2c;
-  parameter logic [BlockAw-1:0] SPI_HOST_EVENT_ENABLE_OFFSET = 6'h 30;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_0_OFFSET = 6'h 18;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_1_OFFSET = 6'h 1c;
+  parameter logic [BlockAw-1:0] SPI_HOST_CSID_OFFSET = 6'h 20;
+  parameter logic [BlockAw-1:0] SPI_HOST_COMMAND_OFFSET = 6'h 24;
+  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_ENABLE_OFFSET = 6'h 2c;
+  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_STATUS_OFFSET = 6'h 30;
+  parameter logic [BlockAw-1:0] SPI_HOST_EVENT_ENABLE_OFFSET = 6'h 34;
 
   // Reset values for hwext registers and their fields
   parameter logic [1:0] SPI_HOST_INTR_TEST_RESVAL = 2'h 0;
@@ -306,7 +307,7 @@ package spi_host_reg_pkg;
   parameter logic [0:0] SPI_HOST_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;
 
   // Window parameters
-  parameter logic [BlockAw-1:0] SPI_HOST_DATA_OFFSET = 6'h 24;
+  parameter logic [BlockAw-1:0] SPI_HOST_DATA_OFFSET = 6'h 28;
   parameter int unsigned        SPI_HOST_DATA_SIZE   = 'h 4;
 
   // Register index
@@ -317,7 +318,8 @@ package spi_host_reg_pkg;
     SPI_HOST_ALERT_TEST,
     SPI_HOST_CONTROL,
     SPI_HOST_STATUS,
-    SPI_HOST_CONFIGOPTS,
+    SPI_HOST_CONFIGOPTS_0,
+    SPI_HOST_CONFIGOPTS_1,
     SPI_HOST_CSID,
     SPI_HOST_COMMAND,
     SPI_HOST_ERROR_ENABLE,
@@ -326,19 +328,20 @@ package spi_host_reg_pkg;
   } spi_host_id_e;
 
   // Register width information to check illegal writes
-  parameter logic [3:0] SPI_HOST_PERMIT [12] = '{
+  parameter logic [3:0] SPI_HOST_PERMIT [13] = '{
     4'b 0001, // index[ 0] SPI_HOST_INTR_STATE
     4'b 0001, // index[ 1] SPI_HOST_INTR_ENABLE
     4'b 0001, // index[ 2] SPI_HOST_INTR_TEST
     4'b 0001, // index[ 3] SPI_HOST_ALERT_TEST
     4'b 1111, // index[ 4] SPI_HOST_CONTROL
     4'b 1111, // index[ 5] SPI_HOST_STATUS
-    4'b 1111, // index[ 6] SPI_HOST_CONFIGOPTS
-    4'b 1111, // index[ 7] SPI_HOST_CSID
-    4'b 0011, // index[ 8] SPI_HOST_COMMAND
-    4'b 0001, // index[ 9] SPI_HOST_ERROR_ENABLE
-    4'b 0001, // index[10] SPI_HOST_ERROR_STATUS
-    4'b 0001  // index[11] SPI_HOST_EVENT_ENABLE
+    4'b 1111, // index[ 6] SPI_HOST_CONFIGOPTS_0
+    4'b 1111, // index[ 7] SPI_HOST_CONFIGOPTS_1
+    4'b 1111, // index[ 8] SPI_HOST_CSID
+    4'b 0011, // index[ 9] SPI_HOST_COMMAND
+    4'b 0001, // index[10] SPI_HOST_ERROR_ENABLE
+    4'b 0001, // index[11] SPI_HOST_ERROR_STATUS
+    4'b 0001  // index[12] SPI_HOST_EVENT_ENABLE
   };
 
 endpackage
diff --git a/rtl/spi_host_reg_top.sv b/rtl/spi_host_reg_top.sv
index 731e63a..748c97e 100644
--- a/rtl/spi_host_reg_top.sv
+++ b/rtl/spi_host_reg_top.sv
@@ -4,25 +4,27 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
 
-module spi_host_reg_top (
+`include "common_cells/assertions.svh"
+
+module spi_host_reg_top #(
+    parameter type reg_req_t = logic,
+    parameter type reg_rsp_t = logic,
+    parameter int AW = 6
+) (
   input clk_i,
   input rst_ni,
-
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Output port for window
-  output tlul_pkg::tl_h2d_t tl_win_o,
-  input  tlul_pkg::tl_d2h_t tl_win_i,
+  output reg_req_t [1-1:0] reg_req_win_o,
+  input  reg_rsp_t [1-1:0] reg_rsp_win_i,
 
   // To HW
   output spi_host_reg_pkg::spi_host_reg2hw_t reg2hw, // Write
   input  spi_host_reg_pkg::spi_host_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -30,7 +32,6 @@ module spi_host_reg_top (
 
   import spi_host_reg_pkg::* ;
 
-  localparam int AW = 6;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -46,141 +47,97 @@ module spi_host_reg_top (
   logic          addrmiss, wr_err;
 
   logic [DW-1:0] reg_rdata_next;
-  logic reg_busy;
 
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
+  // Below register interface can be changed
+  reg_req_t  reg_intf_req;
+  reg_rsp_t  reg_intf_rsp;
 
 
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
+  logic [0:0] reg_steer;
 
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o(tl_o)
-  );
+  reg_req_t [2-1:0] reg_intf_demux_req;
+  reg_rsp_t [2-1:0] reg_intf_demux_rsp;
 
-  tlul_pkg::tl_h2d_t tl_socket_h2d [2];
-  tlul_pkg::tl_d2h_t tl_socket_d2h [2];
+  // demux connection
+  assign reg_intf_req = reg_intf_demux_req[1];
+  assign reg_intf_demux_rsp[1] = reg_intf_rsp;
 
-  logic [1:0] reg_steer;
-
-  // socket_1n connection
-  assign tl_reg_h2d = tl_socket_h2d[1];
-  assign tl_socket_d2h[1] = tl_reg_d2h;
-
-  assign tl_win_o = tl_socket_h2d[0];
-  assign tl_socket_d2h[0] = tl_win_i;
+  assign reg_req_win_o[0] = reg_intf_demux_req[0];
+  assign reg_intf_demux_rsp[0] = reg_rsp_win_i[0];
 
   // Create Socket_1n
-  tlul_socket_1n #(
-    .N          (2),
-    .HReqPass   (1'b1),
-    .HRspPass   (1'b1),
-    .DReqPass   ({2{1'b1}}),
-    .DRspPass   ({2{1'b1}}),
-    .HReqDepth  (4'h0),
-    .HRspDepth  (4'h0),
-    .DReqDepth  ({2{4'h0}}),
-    .DRspDepth  ({2{4'h0}})
-  ) u_socket (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
-    .tl_h_i (tl_i),
-    .tl_h_o (tl_o_pre),
-    .tl_d_o (tl_socket_h2d),
-    .tl_d_i (tl_socket_d2h),
-    .dev_select_i (reg_steer)
+  reg_demux #(
+    .NoPorts  (2),
+    .req_t    (reg_req_t),
+    .rsp_t    (reg_rsp_t)
+  ) i_reg_demux (
+    .clk_i,
+    .rst_ni,
+    .in_req_i (reg_req_i),
+    .in_rsp_o (reg_rsp_o),
+    .out_req_o (reg_intf_demux_req),
+    .out_rsp_i (reg_intf_demux_rsp),
+    .in_select_i (reg_steer)
   );
 
+
   // Create steering logic
   always_comb begin
     reg_steer = 1;       // Default set to register
 
     // TODO: Can below codes be unique case () inside ?
-    if (tl_i.a_address[AW-1:0] >= 36 && tl_i.a_address[AW-1:0] < 40) begin
+    if (reg_req_i.addr[AW-1:0] >= 40 && reg_req_i.addr[AW-1:0] < 44) begin
       reg_steer = 0;
     end
-    if (intg_err) begin
-      reg_steer = 1;
-    end
   end
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
-
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
-
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .busy_i  (reg_busy),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
 
-  // cdc oversampling signals
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
-  logic intr_state_we;
   logic intr_state_error_qs;
   logic intr_state_error_wd;
+  logic intr_state_error_we;
   logic intr_state_spi_event_qs;
   logic intr_state_spi_event_wd;
-  logic intr_enable_we;
+  logic intr_state_spi_event_we;
   logic intr_enable_error_qs;
   logic intr_enable_error_wd;
+  logic intr_enable_error_we;
   logic intr_enable_spi_event_qs;
   logic intr_enable_spi_event_wd;
-  logic intr_test_we;
+  logic intr_enable_spi_event_we;
   logic intr_test_error_wd;
+  logic intr_test_error_we;
   logic intr_test_spi_event_wd;
-  logic alert_test_we;
+  logic intr_test_spi_event_we;
   logic alert_test_wd;
-  logic control_we;
+  logic alert_test_we;
   logic [7:0] control_rx_watermark_qs;
   logic [7:0] control_rx_watermark_wd;
+  logic control_rx_watermark_we;
   logic [7:0] control_tx_watermark_qs;
   logic [7:0] control_tx_watermark_wd;
+  logic control_tx_watermark_we;
   logic control_sw_rst_qs;
   logic control_sw_rst_wd;
+  logic control_sw_rst_we;
   logic control_spien_qs;
   logic control_spien_wd;
+  logic control_spien_we;
   logic [7:0] status_txqd_qs;
   logic [7:0] status_rxqd_qs;
   logic status_rxwm_qs;
@@ -194,68 +151,111 @@ module spi_host_reg_top (
   logic status_txfull_qs;
   logic status_active_qs;
   logic status_ready_qs;
-  logic configopts_we;
-  logic [15:0] configopts_clkdiv_0_qs;
-  logic [15:0] configopts_clkdiv_0_wd;
-  logic [3:0] configopts_csnidle_0_qs;
-  logic [3:0] configopts_csnidle_0_wd;
-  logic [3:0] configopts_csntrail_0_qs;
-  logic [3:0] configopts_csntrail_0_wd;
-  logic [3:0] configopts_csnlead_0_qs;
-  logic [3:0] configopts_csnlead_0_wd;
-  logic configopts_fullcyc_0_qs;
-  logic configopts_fullcyc_0_wd;
-  logic configopts_cpha_0_qs;
-  logic configopts_cpha_0_wd;
-  logic configopts_cpol_0_qs;
-  logic configopts_cpol_0_wd;
-  logic csid_we;
+  logic [15:0] configopts_0_clkdiv_0_qs;
+  logic [15:0] configopts_0_clkdiv_0_wd;
+  logic configopts_0_clkdiv_0_we;
+  logic [3:0] configopts_0_csnidle_0_qs;
+  logic [3:0] configopts_0_csnidle_0_wd;
+  logic configopts_0_csnidle_0_we;
+  logic [3:0] configopts_0_csntrail_0_qs;
+  logic [3:0] configopts_0_csntrail_0_wd;
+  logic configopts_0_csntrail_0_we;
+  logic [3:0] configopts_0_csnlead_0_qs;
+  logic [3:0] configopts_0_csnlead_0_wd;
+  logic configopts_0_csnlead_0_we;
+  logic configopts_0_fullcyc_0_qs;
+  logic configopts_0_fullcyc_0_wd;
+  logic configopts_0_fullcyc_0_we;
+  logic configopts_0_cpha_0_qs;
+  logic configopts_0_cpha_0_wd;
+  logic configopts_0_cpha_0_we;
+  logic configopts_0_cpol_0_qs;
+  logic configopts_0_cpol_0_wd;
+  logic configopts_0_cpol_0_we;
+  logic [15:0] configopts_1_clkdiv_1_qs;
+  logic [15:0] configopts_1_clkdiv_1_wd;
+  logic configopts_1_clkdiv_1_we;
+  logic [3:0] configopts_1_csnidle_1_qs;
+  logic [3:0] configopts_1_csnidle_1_wd;
+  logic configopts_1_csnidle_1_we;
+  logic [3:0] configopts_1_csntrail_1_qs;
+  logic [3:0] configopts_1_csntrail_1_wd;
+  logic configopts_1_csntrail_1_we;
+  logic [3:0] configopts_1_csnlead_1_qs;
+  logic [3:0] configopts_1_csnlead_1_wd;
+  logic configopts_1_csnlead_1_we;
+  logic configopts_1_fullcyc_1_qs;
+  logic configopts_1_fullcyc_1_wd;
+  logic configopts_1_fullcyc_1_we;
+  logic configopts_1_cpha_1_qs;
+  logic configopts_1_cpha_1_wd;
+  logic configopts_1_cpha_1_we;
+  logic configopts_1_cpol_1_qs;
+  logic configopts_1_cpol_1_wd;
+  logic configopts_1_cpol_1_we;
   logic [31:0] csid_qs;
   logic [31:0] csid_wd;
-  logic command_we;
+  logic csid_we;
   logic [8:0] command_len_qs;
   logic [8:0] command_len_wd;
+  logic command_len_we;
   logic command_csaat_qs;
   logic command_csaat_wd;
+  logic command_csaat_we;
   logic [1:0] command_speed_qs;
   logic [1:0] command_speed_wd;
+  logic command_speed_we;
   logic [1:0] command_direction_qs;
   logic [1:0] command_direction_wd;
-  logic error_enable_we;
+  logic command_direction_we;
   logic error_enable_cmdbusy_qs;
   logic error_enable_cmdbusy_wd;
+  logic error_enable_cmdbusy_we;
   logic error_enable_overflow_qs;
   logic error_enable_overflow_wd;
+  logic error_enable_overflow_we;
   logic error_enable_underflow_qs;
   logic error_enable_underflow_wd;
+  logic error_enable_underflow_we;
   logic error_enable_cmdinval_qs;
   logic error_enable_cmdinval_wd;
+  logic error_enable_cmdinval_we;
   logic error_enable_csidinval_qs;
   logic error_enable_csidinval_wd;
-  logic error_status_we;
+  logic error_enable_csidinval_we;
   logic error_status_cmdbusy_qs;
   logic error_status_cmdbusy_wd;
+  logic error_status_cmdbusy_we;
   logic error_status_overflow_qs;
   logic error_status_overflow_wd;
+  logic error_status_overflow_we;
   logic error_status_underflow_qs;
   logic error_status_underflow_wd;
+  logic error_status_underflow_we;
   logic error_status_cmdinval_qs;
   logic error_status_cmdinval_wd;
+  logic error_status_cmdinval_we;
   logic error_status_csidinval_qs;
   logic error_status_csidinval_wd;
-  logic event_enable_we;
+  logic error_status_csidinval_we;
   logic event_enable_rxfull_qs;
   logic event_enable_rxfull_wd;
+  logic event_enable_rxfull_we;
   logic event_enable_txempty_qs;
   logic event_enable_txempty_wd;
+  logic event_enable_txempty_we;
   logic event_enable_rxwm_qs;
   logic event_enable_rxwm_wd;
+  logic event_enable_rxwm_we;
   logic event_enable_txwm_qs;
   logic event_enable_txwm_wd;
+  logic event_enable_txwm_we;
   logic event_enable_ready_qs;
   logic event_enable_ready_wd;
+  logic event_enable_ready_we;
   logic event_enable_idle_qs;
   logic event_enable_idle_wd;
+  logic event_enable_idle_we;
 
   // Register instances
   // R[intr_state]: V(False)
@@ -263,23 +263,23 @@ module spi_host_reg_top (
   //   F[error]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_error (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_error_we),
     .wd     (intr_state_error_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.error.de),
-    .d      (hw2reg.intr_state.error.d),
+    .d      (hw2reg.intr_state.error.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.error.q),
+    .q      (reg2hw.intr_state.error.q ),
 
     // to register interface (read)
     .qs     (intr_state_error_qs)
@@ -289,23 +289,23 @@ module spi_host_reg_top (
   //   F[spi_event]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_spi_event (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_spi_event_we),
     .wd     (intr_state_spi_event_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.spi_event.de),
-    .d      (hw2reg.intr_state.spi_event.d),
+    .d      (hw2reg.intr_state.spi_event.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.spi_event.q),
+    .q      (reg2hw.intr_state.spi_event.q ),
 
     // to register interface (read)
     .qs     (intr_state_spi_event_qs)
@@ -317,23 +317,23 @@ module spi_host_reg_top (
   //   F[error]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_error (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_error_we),
     .wd     (intr_enable_error_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.error.q),
+    .q      (reg2hw.intr_enable.error.q ),
 
     // to register interface (read)
     .qs     (intr_enable_error_qs)
@@ -343,23 +343,23 @@ module spi_host_reg_top (
   //   F[spi_event]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_spi_event (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_spi_event_we),
     .wd     (intr_enable_spi_event_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.spi_event.q),
+    .q      (reg2hw.intr_enable.spi_event.q ),
 
     // to register interface (read)
     .qs     (intr_enable_spi_event_qs)
@@ -373,12 +373,12 @@ module spi_host_reg_top (
     .DW    (1)
   ) u_intr_test_error (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_error_we),
     .wd     (intr_test_error_wd),
     .d      ('0),
     .qre    (),
     .qe     (reg2hw.intr_test.error.qe),
-    .q      (reg2hw.intr_test.error.q),
+    .q      (reg2hw.intr_test.error.q ),
     .qs     ()
   );
 
@@ -388,12 +388,12 @@ module spi_host_reg_top (
     .DW    (1)
   ) u_intr_test_spi_event (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_spi_event_we),
     .wd     (intr_test_spi_event_wd),
     .d      ('0),
     .qre    (),
     .qe     (reg2hw.intr_test.spi_event.qe),
-    .q      (reg2hw.intr_test.spi_event.q),
+    .q      (reg2hw.intr_test.spi_event.q ),
     .qs     ()
   );
 
@@ -409,7 +409,7 @@ module spi_host_reg_top (
     .d      ('0),
     .qre    (),
     .qe     (reg2hw.alert_test.qe),
-    .q      (reg2hw.alert_test.q),
+    .q      (reg2hw.alert_test.q ),
     .qs     ()
   );
 
@@ -419,23 +419,23 @@ module spi_host_reg_top (
   //   F[rx_watermark]: 7:0
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (8'h7f)
   ) u_control_rx_watermark (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_rx_watermark_we),
     .wd     (control_rx_watermark_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.rx_watermark.q),
+    .q      (reg2hw.control.rx_watermark.q ),
 
     // to register interface (read)
     .qs     (control_rx_watermark_qs)
@@ -445,23 +445,23 @@ module spi_host_reg_top (
   //   F[tx_watermark]: 15:8
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (8'h0)
   ) u_control_tx_watermark (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_tx_watermark_we),
     .wd     (control_tx_watermark_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.tx_watermark.q),
+    .q      (reg2hw.control.tx_watermark.q ),
 
     // to register interface (read)
     .qs     (control_tx_watermark_qs)
@@ -471,23 +471,23 @@ module spi_host_reg_top (
   //   F[sw_rst]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_control_sw_rst (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_sw_rst_we),
     .wd     (control_sw_rst_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.sw_rst.q),
+    .q      (reg2hw.control.sw_rst.q ),
 
     // to register interface (read)
     .qs     (control_sw_rst_qs)
@@ -497,23 +497,23 @@ module spi_host_reg_top (
   //   F[spien]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_control_spien (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_spien_we),
     .wd     (control_spien_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.spien.q),
+    .q      (reg2hw.control.spien.q ),
 
     // to register interface (read)
     .qs     (control_spien_qs)
@@ -525,19 +525,18 @@ module spi_host_reg_top (
   //   F[txqd]: 7:0
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (8'h0)
   ) u_status_txqd (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txqd.de),
-    .d      (hw2reg.status.txqd.d),
+    .d      (hw2reg.status.txqd.d ),
 
     // to internal hardware
     .qe     (),
@@ -551,19 +550,18 @@ module spi_host_reg_top (
   //   F[rxqd]: 15:8
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (8'h0)
   ) u_status_rxqd (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxqd.de),
-    .d      (hw2reg.status.rxqd.d),
+    .d      (hw2reg.status.rxqd.d ),
 
     // to internal hardware
     .qe     (),
@@ -577,19 +575,18 @@ module spi_host_reg_top (
   //   F[rxwm]: 20:20
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxwm.de),
-    .d      (hw2reg.status.rxwm.d),
+    .d      (hw2reg.status.rxwm.d ),
 
     // to internal hardware
     .qe     (),
@@ -603,19 +600,18 @@ module spi_host_reg_top (
   //   F[byteorder]: 22:22
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_byteorder (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.byteorder.de),
-    .d      (hw2reg.status.byteorder.d),
+    .d      (hw2reg.status.byteorder.d ),
 
     // to internal hardware
     .qe     (),
@@ -629,19 +625,18 @@ module spi_host_reg_top (
   //   F[rxstall]: 23:23
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxstall (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxstall.de),
-    .d      (hw2reg.status.rxstall.d),
+    .d      (hw2reg.status.rxstall.d ),
 
     // to internal hardware
     .qe     (),
@@ -655,19 +650,18 @@ module spi_host_reg_top (
   //   F[rxempty]: 24:24
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxempty (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxempty.de),
-    .d      (hw2reg.status.rxempty.d),
+    .d      (hw2reg.status.rxempty.d ),
 
     // to internal hardware
     .qe     (),
@@ -681,19 +675,18 @@ module spi_host_reg_top (
   //   F[rxfull]: 25:25
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxfull (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxfull.de),
-    .d      (hw2reg.status.rxfull.d),
+    .d      (hw2reg.status.rxfull.d ),
 
     // to internal hardware
     .qe     (),
@@ -707,19 +700,18 @@ module spi_host_reg_top (
   //   F[txwm]: 26:26
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txwm.de),
-    .d      (hw2reg.status.txwm.d),
+    .d      (hw2reg.status.txwm.d ),
 
     // to internal hardware
     .qe     (),
@@ -733,19 +725,18 @@ module spi_host_reg_top (
   //   F[txstall]: 27:27
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txstall (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txstall.de),
-    .d      (hw2reg.status.txstall.d),
+    .d      (hw2reg.status.txstall.d ),
 
     // to internal hardware
     .qe     (),
@@ -759,19 +750,18 @@ module spi_host_reg_top (
   //   F[txempty]: 28:28
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txempty (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txempty.de),
-    .d      (hw2reg.status.txempty.d),
+    .d      (hw2reg.status.txempty.d ),
 
     // to internal hardware
     .qe     (),
@@ -785,19 +775,18 @@ module spi_host_reg_top (
   //   F[txfull]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txfull (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txfull.de),
-    .d      (hw2reg.status.txfull.d),
+    .d      (hw2reg.status.txfull.d ),
 
     // to internal hardware
     .qe     (),
@@ -811,19 +800,18 @@ module spi_host_reg_top (
   //   F[active]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_active (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.active.de),
-    .d      (hw2reg.status.active.d),
+    .d      (hw2reg.status.active.d ),
 
     // to internal hardware
     .qe     (),
@@ -837,19 +825,18 @@ module spi_host_reg_top (
   //   F[ready]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_ready (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.ready.de),
-    .d      (hw2reg.status.ready.d),
+    .d      (hw2reg.status.ready.d ),
 
     // to internal hardware
     .qe     (),
@@ -862,187 +849,372 @@ module spi_host_reg_top (
 
 
   // Subregister 0 of Multireg configopts
-  // R[configopts]: V(False)
+  // R[configopts_0]: V(False)
 
   // F[clkdiv_0]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
-  ) u_configopts_clkdiv_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_clkdiv_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_clkdiv_0_wd),
+    .we     (configopts_0_clkdiv_0_we),
+    .wd     (configopts_0_clkdiv_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].clkdiv.q),
+    .q      (reg2hw.configopts[0].clkdiv.q ),
 
     // to register interface (read)
-    .qs     (configopts_clkdiv_0_qs)
+    .qs     (configopts_0_clkdiv_0_qs)
   );
 
 
   // F[csnidle_0]: 19:16
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csnidle_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_csnidle_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_csnidle_0_wd),
+    .we     (configopts_0_csnidle_0_we),
+    .wd     (configopts_0_csnidle_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].csnidle.q),
+    .q      (reg2hw.configopts[0].csnidle.q ),
 
     // to register interface (read)
-    .qs     (configopts_csnidle_0_qs)
+    .qs     (configopts_0_csnidle_0_qs)
   );
 
 
   // F[csntrail_0]: 23:20
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csntrail_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_csntrail_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_csntrail_0_wd),
+    .we     (configopts_0_csntrail_0_we),
+    .wd     (configopts_0_csntrail_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].csntrail.q),
+    .q      (reg2hw.configopts[0].csntrail.q ),
 
     // to register interface (read)
-    .qs     (configopts_csntrail_0_qs)
+    .qs     (configopts_0_csntrail_0_qs)
   );
 
 
   // F[csnlead_0]: 27:24
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csnlead_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_csnlead_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_csnlead_0_wd),
+    .we     (configopts_0_csnlead_0_we),
+    .wd     (configopts_0_csnlead_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].csnlead.q),
+    .q      (reg2hw.configopts[0].csnlead.q ),
 
     // to register interface (read)
-    .qs     (configopts_csnlead_0_qs)
+    .qs     (configopts_0_csnlead_0_qs)
   );
 
 
   // F[fullcyc_0]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_fullcyc_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_fullcyc_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_fullcyc_0_wd),
+    .we     (configopts_0_fullcyc_0_we),
+    .wd     (configopts_0_fullcyc_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].fullcyc.q),
+    .q      (reg2hw.configopts[0].fullcyc.q ),
 
     // to register interface (read)
-    .qs     (configopts_fullcyc_0_qs)
+    .qs     (configopts_0_fullcyc_0_qs)
   );
 
 
   // F[cpha_0]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_cpha_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_cpha_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_cpha_0_wd),
+    .we     (configopts_0_cpha_0_we),
+    .wd     (configopts_0_cpha_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].cpha.q),
+    .q      (reg2hw.configopts[0].cpha.q ),
 
     // to register interface (read)
-    .qs     (configopts_cpha_0_qs)
+    .qs     (configopts_0_cpha_0_qs)
   );
 
 
   // F[cpol_0]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_cpol_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_cpol_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_cpol_0_wd),
+    .we     (configopts_0_cpol_0_we),
+    .wd     (configopts_0_cpol_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[0].cpol.q ),
+
+    // to register interface (read)
+    .qs     (configopts_0_cpol_0_qs)
+  );
+
+
+  // Subregister 1 of Multireg configopts
+  // R[configopts_1]: V(False)
+
+  // F[clkdiv_1]: 15:0
+  prim_subreg #(
+    .DW      (16),
+    .SWACCESS("RW"),
+    .RESVAL  (16'h0)
+  ) u_configopts_1_clkdiv_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_clkdiv_1_we),
+    .wd     (configopts_1_clkdiv_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].clkdiv.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_clkdiv_1_qs)
+  );
+
+
+  // F[csnidle_1]: 19:16
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csnidle_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csnidle_1_we),
+    .wd     (configopts_1_csnidle_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csnidle.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csnidle_1_qs)
+  );
+
+
+  // F[csntrail_1]: 23:20
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csntrail_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csntrail_1_we),
+    .wd     (configopts_1_csntrail_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csntrail.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csntrail_1_qs)
+  );
+
+
+  // F[csnlead_1]: 27:24
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csnlead_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csnlead_1_we),
+    .wd     (configopts_1_csnlead_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csnlead.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csnlead_1_qs)
+  );
+
+
+  // F[fullcyc_1]: 29:29
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_fullcyc_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_fullcyc_1_we),
+    .wd     (configopts_1_fullcyc_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].cpol.q),
+    .q      (reg2hw.configopts[1].fullcyc.q ),
 
     // to register interface (read)
-    .qs     (configopts_cpol_0_qs)
+    .qs     (configopts_1_fullcyc_1_qs)
+  );
+
+
+  // F[cpha_1]: 30:30
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_cpha_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_cpha_1_we),
+    .wd     (configopts_1_cpha_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].cpha.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_cpha_1_qs)
+  );
+
+
+  // F[cpol_1]: 31:31
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_cpol_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_cpol_1_we),
+    .wd     (configopts_1_cpol_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].cpol.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_cpol_1_qs)
   );
 
 
@@ -1051,11 +1223,11 @@ module spi_host_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_csid (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (csid_we),
@@ -1063,11 +1235,11 @@ module spi_host_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.csid.q),
+    .q      (reg2hw.csid.q ),
 
     // to register interface (read)
     .qs     (csid_qs)
@@ -1079,23 +1251,23 @@ module spi_host_reg_top (
   //   F[len]: 8:0
   prim_subreg #(
     .DW      (9),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (9'h0)
   ) u_command_len (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (command_we),
+    .we     (command_len_we),
     .wd     (command_len_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (reg2hw.command.len.qe),
-    .q      (reg2hw.command.len.q),
+    .q      (reg2hw.command.len.q ),
 
     // to register interface (read)
     .qs     (command_len_qs)
@@ -1105,23 +1277,23 @@ module spi_host_reg_top (
   //   F[csaat]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_command_csaat (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (command_we),
+    .we     (command_csaat_we),
     .wd     (command_csaat_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (reg2hw.command.csaat.qe),
-    .q      (reg2hw.command.csaat.q),
+    .q      (reg2hw.command.csaat.q ),
 
     // to register interface (read)
     .qs     (command_csaat_qs)
@@ -1131,23 +1303,23 @@ module spi_host_reg_top (
   //   F[speed]: 11:10
   prim_subreg #(
     .DW      (2),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (2'h0)
   ) u_command_speed (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (command_we),
+    .we     (command_speed_we),
     .wd     (command_speed_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (reg2hw.command.speed.qe),
-    .q      (reg2hw.command.speed.q),
+    .q      (reg2hw.command.speed.q ),
 
     // to register interface (read)
     .qs     (command_speed_qs)
@@ -1157,23 +1329,23 @@ module spi_host_reg_top (
   //   F[direction]: 13:12
   prim_subreg #(
     .DW      (2),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (2'h0)
   ) u_command_direction (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (command_we),
+    .we     (command_direction_we),
     .wd     (command_direction_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (reg2hw.command.direction.qe),
-    .q      (reg2hw.command.direction.q),
+    .q      (reg2hw.command.direction.q ),
 
     // to register interface (read)
     .qs     (command_direction_qs)
@@ -1185,23 +1357,23 @@ module spi_host_reg_top (
   //   F[cmdbusy]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_cmdbusy (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_cmdbusy_we),
     .wd     (error_enable_cmdbusy_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.cmdbusy.q),
+    .q      (reg2hw.error_enable.cmdbusy.q ),
 
     // to register interface (read)
     .qs     (error_enable_cmdbusy_qs)
@@ -1211,23 +1383,23 @@ module spi_host_reg_top (
   //   F[overflow]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_overflow_we),
     .wd     (error_enable_overflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.overflow.q),
+    .q      (reg2hw.error_enable.overflow.q ),
 
     // to register interface (read)
     .qs     (error_enable_overflow_qs)
@@ -1237,23 +1409,23 @@ module spi_host_reg_top (
   //   F[underflow]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_underflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_underflow_we),
     .wd     (error_enable_underflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.underflow.q),
+    .q      (reg2hw.error_enable.underflow.q ),
 
     // to register interface (read)
     .qs     (error_enable_underflow_qs)
@@ -1263,23 +1435,23 @@ module spi_host_reg_top (
   //   F[cmdinval]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_cmdinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_cmdinval_we),
     .wd     (error_enable_cmdinval_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.cmdinval.q),
+    .q      (reg2hw.error_enable.cmdinval.q ),
 
     // to register interface (read)
     .qs     (error_enable_cmdinval_qs)
@@ -1289,23 +1461,23 @@ module spi_host_reg_top (
   //   F[csidinval]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_csidinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_csidinval_we),
     .wd     (error_enable_csidinval_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.csidinval.q),
+    .q      (reg2hw.error_enable.csidinval.q ),
 
     // to register interface (read)
     .qs     (error_enable_csidinval_qs)
@@ -1317,23 +1489,23 @@ module spi_host_reg_top (
   //   F[cmdbusy]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_cmdbusy (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_cmdbusy_we),
     .wd     (error_status_cmdbusy_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.cmdbusy.de),
-    .d      (hw2reg.error_status.cmdbusy.d),
+    .d      (hw2reg.error_status.cmdbusy.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.cmdbusy.q),
+    .q      (reg2hw.error_status.cmdbusy.q ),
 
     // to register interface (read)
     .qs     (error_status_cmdbusy_qs)
@@ -1343,23 +1515,23 @@ module spi_host_reg_top (
   //   F[overflow]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_overflow_we),
     .wd     (error_status_overflow_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.overflow.de),
-    .d      (hw2reg.error_status.overflow.d),
+    .d      (hw2reg.error_status.overflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.overflow.q),
+    .q      (reg2hw.error_status.overflow.q ),
 
     // to register interface (read)
     .qs     (error_status_overflow_qs)
@@ -1369,23 +1541,23 @@ module spi_host_reg_top (
   //   F[underflow]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_underflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_underflow_we),
     .wd     (error_status_underflow_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.underflow.de),
-    .d      (hw2reg.error_status.underflow.d),
+    .d      (hw2reg.error_status.underflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.underflow.q),
+    .q      (reg2hw.error_status.underflow.q ),
 
     // to register interface (read)
     .qs     (error_status_underflow_qs)
@@ -1395,23 +1567,23 @@ module spi_host_reg_top (
   //   F[cmdinval]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_cmdinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_cmdinval_we),
     .wd     (error_status_cmdinval_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.cmdinval.de),
-    .d      (hw2reg.error_status.cmdinval.d),
+    .d      (hw2reg.error_status.cmdinval.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.cmdinval.q),
+    .q      (reg2hw.error_status.cmdinval.q ),
 
     // to register interface (read)
     .qs     (error_status_cmdinval_qs)
@@ -1421,23 +1593,23 @@ module spi_host_reg_top (
   //   F[csidinval]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_csidinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_csidinval_we),
     .wd     (error_status_csidinval_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.csidinval.de),
-    .d      (hw2reg.error_status.csidinval.d),
+    .d      (hw2reg.error_status.csidinval.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.csidinval.q),
+    .q      (reg2hw.error_status.csidinval.q ),
 
     // to register interface (read)
     .qs     (error_status_csidinval_qs)
@@ -1449,23 +1621,23 @@ module spi_host_reg_top (
   //   F[rxfull]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_rxfull (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_rxfull_we),
     .wd     (event_enable_rxfull_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.rxfull.q),
+    .q      (reg2hw.event_enable.rxfull.q ),
 
     // to register interface (read)
     .qs     (event_enable_rxfull_qs)
@@ -1475,23 +1647,23 @@ module spi_host_reg_top (
   //   F[txempty]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_txempty (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_txempty_we),
     .wd     (event_enable_txempty_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.txempty.q),
+    .q      (reg2hw.event_enable.txempty.q ),
 
     // to register interface (read)
     .qs     (event_enable_txempty_qs)
@@ -1501,23 +1673,23 @@ module spi_host_reg_top (
   //   F[rxwm]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_rxwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_rxwm_we),
     .wd     (event_enable_rxwm_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.rxwm.q),
+    .q      (reg2hw.event_enable.rxwm.q ),
 
     // to register interface (read)
     .qs     (event_enable_rxwm_qs)
@@ -1527,23 +1699,23 @@ module spi_host_reg_top (
   //   F[txwm]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_txwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_txwm_we),
     .wd     (event_enable_txwm_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.txwm.q),
+    .q      (reg2hw.event_enable.txwm.q ),
 
     // to register interface (read)
     .qs     (event_enable_txwm_qs)
@@ -1553,23 +1725,23 @@ module spi_host_reg_top (
   //   F[ready]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_ready (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_ready_we),
     .wd     (event_enable_ready_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.ready.q),
+    .q      (reg2hw.event_enable.ready.q ),
 
     // to register interface (read)
     .qs     (event_enable_ready_qs)
@@ -1579,23 +1751,23 @@ module spi_host_reg_top (
   //   F[idle]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_idle (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_idle_we),
     .wd     (event_enable_idle_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.idle.q),
+    .q      (reg2hw.event_enable.idle.q ),
 
     // to register interface (read)
     .qs     (event_enable_idle_qs)
@@ -1604,7 +1776,7 @@ module spi_host_reg_top (
 
 
 
-  logic [11:0] addr_hit;
+  logic [12:0] addr_hit;
   always_comb begin
     addr_hit = '0;
     addr_hit[ 0] = (reg_addr == SPI_HOST_INTR_STATE_OFFSET);
@@ -1613,12 +1785,13 @@ module spi_host_reg_top (
     addr_hit[ 3] = (reg_addr == SPI_HOST_ALERT_TEST_OFFSET);
     addr_hit[ 4] = (reg_addr == SPI_HOST_CONTROL_OFFSET);
     addr_hit[ 5] = (reg_addr == SPI_HOST_STATUS_OFFSET);
-    addr_hit[ 6] = (reg_addr == SPI_HOST_CONFIGOPTS_OFFSET);
-    addr_hit[ 7] = (reg_addr == SPI_HOST_CSID_OFFSET);
-    addr_hit[ 8] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
-    addr_hit[ 9] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
-    addr_hit[10] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
-    addr_hit[11] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
+    addr_hit[ 6] = (reg_addr == SPI_HOST_CONFIGOPTS_0_OFFSET);
+    addr_hit[ 7] = (reg_addr == SPI_HOST_CONFIGOPTS_1_OFFSET);
+    addr_hit[ 8] = (reg_addr == SPI_HOST_CSID_OFFSET);
+    addr_hit[ 9] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
+    addr_hit[10] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
+    addr_hit[11] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
+    addr_hit[12] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
   end
 
   assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
@@ -1637,96 +1810,146 @@ module spi_host_reg_top (
                (addr_hit[ 8] & (|(SPI_HOST_PERMIT[ 8] & ~reg_be))) |
                (addr_hit[ 9] & (|(SPI_HOST_PERMIT[ 9] & ~reg_be))) |
                (addr_hit[10] & (|(SPI_HOST_PERMIT[10] & ~reg_be))) |
-               (addr_hit[11] & (|(SPI_HOST_PERMIT[11] & ~reg_be)))));
+               (addr_hit[11] & (|(SPI_HOST_PERMIT[11] & ~reg_be))) |
+               (addr_hit[12] & (|(SPI_HOST_PERMIT[12] & ~reg_be)))));
   end
-  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;
 
+  assign intr_state_error_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_error_wd = reg_wdata[0];
 
+  assign intr_state_spi_event_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_spi_event_wd = reg_wdata[1];
-  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;
 
+  assign intr_enable_error_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_error_wd = reg_wdata[0];
 
+  assign intr_enable_spi_event_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_spi_event_wd = reg_wdata[1];
-  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;
 
+  assign intr_test_error_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_error_wd = reg_wdata[0];
 
+  assign intr_test_spi_event_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_spi_event_wd = reg_wdata[1];
-  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
 
+  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
   assign alert_test_wd = reg_wdata[0];
-  assign control_we = addr_hit[4] & reg_we & !reg_error;
 
+  assign control_rx_watermark_we = addr_hit[4] & reg_we & !reg_error;
   assign control_rx_watermark_wd = reg_wdata[7:0];
 
+  assign control_tx_watermark_we = addr_hit[4] & reg_we & !reg_error;
   assign control_tx_watermark_wd = reg_wdata[15:8];
 
+  assign control_sw_rst_we = addr_hit[4] & reg_we & !reg_error;
   assign control_sw_rst_wd = reg_wdata[30];
 
+  assign control_spien_we = addr_hit[4] & reg_we & !reg_error;
   assign control_spien_wd = reg_wdata[31];
-  assign configopts_we = addr_hit[6] & reg_we & !reg_error;
 
-  assign configopts_clkdiv_0_wd = reg_wdata[15:0];
+  assign configopts_0_clkdiv_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_clkdiv_0_wd = reg_wdata[15:0];
+
+  assign configopts_0_csnidle_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csnidle_0_wd = reg_wdata[19:16];
+
+  assign configopts_0_csntrail_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csntrail_0_wd = reg_wdata[23:20];
+
+  assign configopts_0_csnlead_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csnlead_0_wd = reg_wdata[27:24];
 
-  assign configopts_csnidle_0_wd = reg_wdata[19:16];
+  assign configopts_0_fullcyc_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_fullcyc_0_wd = reg_wdata[29];
 
-  assign configopts_csntrail_0_wd = reg_wdata[23:20];
+  assign configopts_0_cpha_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_cpha_0_wd = reg_wdata[30];
 
-  assign configopts_csnlead_0_wd = reg_wdata[27:24];
+  assign configopts_0_cpol_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_cpol_0_wd = reg_wdata[31];
 
-  assign configopts_fullcyc_0_wd = reg_wdata[29];
+  assign configopts_1_clkdiv_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_clkdiv_1_wd = reg_wdata[15:0];
 
-  assign configopts_cpha_0_wd = reg_wdata[30];
+  assign configopts_1_csnidle_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csnidle_1_wd = reg_wdata[19:16];
 
-  assign configopts_cpol_0_wd = reg_wdata[31];
-  assign csid_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csntrail_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csntrail_1_wd = reg_wdata[23:20];
 
+  assign configopts_1_csnlead_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csnlead_1_wd = reg_wdata[27:24];
+
+  assign configopts_1_fullcyc_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_fullcyc_1_wd = reg_wdata[29];
+
+  assign configopts_1_cpha_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_cpha_1_wd = reg_wdata[30];
+
+  assign configopts_1_cpol_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_cpol_1_wd = reg_wdata[31];
+
+  assign csid_we = addr_hit[8] & reg_we & !reg_error;
   assign csid_wd = reg_wdata[31:0];
-  assign command_we = addr_hit[8] & reg_we & !reg_error;
 
+  assign command_len_we = addr_hit[9] & reg_we & !reg_error;
   assign command_len_wd = reg_wdata[8:0];
 
+  assign command_csaat_we = addr_hit[9] & reg_we & !reg_error;
   assign command_csaat_wd = reg_wdata[9];
 
+  assign command_speed_we = addr_hit[9] & reg_we & !reg_error;
   assign command_speed_wd = reg_wdata[11:10];
 
+  assign command_direction_we = addr_hit[9] & reg_we & !reg_error;
   assign command_direction_wd = reg_wdata[13:12];
-  assign error_enable_we = addr_hit[9] & reg_we & !reg_error;
 
+  assign error_enable_cmdbusy_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdbusy_wd = reg_wdata[0];
 
+  assign error_enable_overflow_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_overflow_wd = reg_wdata[1];
 
+  assign error_enable_underflow_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_underflow_wd = reg_wdata[2];
 
+  assign error_enable_cmdinval_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdinval_wd = reg_wdata[3];
 
+  assign error_enable_csidinval_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_csidinval_wd = reg_wdata[4];
-  assign error_status_we = addr_hit[10] & reg_we & !reg_error;
 
+  assign error_status_cmdbusy_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_cmdbusy_wd = reg_wdata[0];
 
+  assign error_status_overflow_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_overflow_wd = reg_wdata[1];
 
+  assign error_status_underflow_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_underflow_wd = reg_wdata[2];
 
+  assign error_status_cmdinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_cmdinval_wd = reg_wdata[3];
 
+  assign error_status_csidinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_csidinval_wd = reg_wdata[4];
-  assign event_enable_we = addr_hit[11] & reg_we & !reg_error;
 
+  assign event_enable_rxfull_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_rxfull_wd = reg_wdata[0];
 
+  assign event_enable_txempty_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_txempty_wd = reg_wdata[1];
 
+  assign event_enable_rxwm_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_rxwm_wd = reg_wdata[2];
 
+  assign event_enable_txwm_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_txwm_wd = reg_wdata[3];
 
+  assign event_enable_ready_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_ready_wd = reg_wdata[4];
 
+  assign event_enable_idle_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_idle_wd = reg_wdata[5];
 
   // Read data return
@@ -1776,27 +1999,37 @@ module spi_host_reg_top (
       end
 
       addr_hit[6]: begin
-        reg_rdata_next[15:0] = configopts_clkdiv_0_qs;
-        reg_rdata_next[19:16] = configopts_csnidle_0_qs;
-        reg_rdata_next[23:20] = configopts_csntrail_0_qs;
-        reg_rdata_next[27:24] = configopts_csnlead_0_qs;
-        reg_rdata_next[29] = configopts_fullcyc_0_qs;
-        reg_rdata_next[30] = configopts_cpha_0_qs;
-        reg_rdata_next[31] = configopts_cpol_0_qs;
+        reg_rdata_next[15:0] = configopts_0_clkdiv_0_qs;
+        reg_rdata_next[19:16] = configopts_0_csnidle_0_qs;
+        reg_rdata_next[23:20] = configopts_0_csntrail_0_qs;
+        reg_rdata_next[27:24] = configopts_0_csnlead_0_qs;
+        reg_rdata_next[29] = configopts_0_fullcyc_0_qs;
+        reg_rdata_next[30] = configopts_0_cpha_0_qs;
+        reg_rdata_next[31] = configopts_0_cpol_0_qs;
       end
 
       addr_hit[7]: begin
-        reg_rdata_next[31:0] = csid_qs;
+        reg_rdata_next[15:0] = configopts_1_clkdiv_1_qs;
+        reg_rdata_next[19:16] = configopts_1_csnidle_1_qs;
+        reg_rdata_next[23:20] = configopts_1_csntrail_1_qs;
+        reg_rdata_next[27:24] = configopts_1_csnlead_1_qs;
+        reg_rdata_next[29] = configopts_1_fullcyc_1_qs;
+        reg_rdata_next[30] = configopts_1_cpha_1_qs;
+        reg_rdata_next[31] = configopts_1_cpol_1_qs;
       end
 
       addr_hit[8]: begin
+        reg_rdata_next[31:0] = csid_qs;
+      end
+
+      addr_hit[9]: begin
         reg_rdata_next[8:0] = command_len_qs;
         reg_rdata_next[9] = command_csaat_qs;
         reg_rdata_next[11:10] = command_speed_qs;
         reg_rdata_next[13:12] = command_direction_qs;
       end
 
-      addr_hit[9]: begin
+      addr_hit[10]: begin
         reg_rdata_next[0] = error_enable_cmdbusy_qs;
         reg_rdata_next[1] = error_enable_overflow_qs;
         reg_rdata_next[2] = error_enable_underflow_qs;
@@ -1804,7 +2037,7 @@ module spi_host_reg_top (
         reg_rdata_next[4] = error_enable_csidinval_qs;
       end
 
-      addr_hit[10]: begin
+      addr_hit[11]: begin
         reg_rdata_next[0] = error_status_cmdbusy_qs;
         reg_rdata_next[1] = error_status_overflow_qs;
         reg_rdata_next[2] = error_status_underflow_qs;
@@ -1812,7 +2045,7 @@ module spi_host_reg_top (
         reg_rdata_next[4] = error_status_csidinval_qs;
       end
 
-      addr_hit[11]: begin
+      addr_hit[12]: begin
         reg_rdata_next[0] = event_enable_rxfull_qs;
         reg_rdata_next[1] = event_enable_txempty_qs;
         reg_rdata_next[2] = event_enable_rxwm_qs;
@@ -1827,17 +2060,6 @@ module spi_host_reg_top (
     endcase
   end
 
-  // register busy
-  always_comb begin
-    reg_busy = '0;
-    unique case (1'b1)
-      default: begin
-        reg_busy  = '0;
-      end
-    endcase
-  end
-
-
   // Unused signal tieoff
 
   // wdata / byte enable are not always fully used
@@ -1848,15 +2070,6 @@ module spi_host_reg_top (
   assign unused_be = ^reg_be;
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
-  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)
-
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)
-
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)
-
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
 endmodule
diff --git a/rtl/spi_host_shift_register.sv b/rtl/spi_host_shift_register.sv
index 992bd34..e1e6807 100644
--- a/rtl/spi_host_shift_register.sv
+++ b/rtl/spi_host_shift_register.sv
@@ -5,6 +5,8 @@
 // Shift Register for Serial Peripheral Interface (SPI) Host IP.
 //
 
+`include "common_cells/assertions.svh"
+
 module spi_host_shift_register (
   input              clk_i,
   input              rst_ni,
@@ -61,7 +63,7 @@ module spi_host_shift_register (
   assign sd_o       = (speed_i == Standard) ? {3'b000, sr_q[7]}   :
                       (speed_i == Dual)     ? {2'b00,  sr_q[7:6]} :
                       (speed_i == Quad)     ? {sr_q[7:4]} :
-                      4'h00;
+                      4'h0;
 
   // Buffer the rx_data outputs to simplify three-way flow control
   // between fsm, shift reg and byte_merge.
diff --git a/rtl/spi_host_window.sv b/rtl/spi_host_window.sv
index 2af9cda..dec3609 100644
--- a/rtl/spi_host_window.sv
+++ b/rtl/spi_host_window.sv
@@ -5,16 +5,21 @@
 // Module to manage TX FIFO window for Serial Peripheral Interface (SPI) host IP.
 //
 
-module spi_host_window (
+`include "common_cells/assertions.svh"
+
+module spi_host_window #(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
+)(
   input  clk_i,
   input  rst_ni,
-  input  tlul_pkg::tl_h2d_t win_i,
-  output tlul_pkg::tl_d2h_t win_o,
+  input  reg_req_t          win_i,
+  output reg_rsp_t          win_o,
   output logic [31:0]       tx_data_o,
   output logic [3:0]        tx_be_o,
   output logic              tx_valid_o,
   input        [31:0]       rx_data_i,
-  output                    rx_ready_o
+  output logic              rx_ready_o
 );
 
   localparam int AW=spi_host_reg_pkg::BlockAw;
@@ -27,22 +32,20 @@ module spi_host_window (
   assign win_error = (tx_valid_o || rx_ready_o) &&
                      (addr != spi_host_reg_pkg::SPI_HOST_DATA_OFFSET);
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW)
-  ) u_adapter (
-    .clk_i,
-    .rst_ni,
-    .tl_i      (win_i),
-    .tl_o      (win_o),
-    .we_o      (tx_valid_o),
-    .re_o      (rx_ready_o),
-    .addr_o    (addr),
-    .wdata_o   (tx_data_o),
-    .be_o      (tx_be_o),
-    .busy_i    ('0),
-    .rdata_i   (rx_data_i),
-    .error_i   (win_error)
-  );
+  // Check that our regbus data is 32 bit wide
+`ASSERT_INIT(RegbusIs32Bit, $bits(win_i.wdata) == 32)
+
+  // We are already a regbus, so no stateful adapter should be needed here
+  // TODO @(paulsc, zarubaf): check this assumption!
+  // Request
+  assign tx_valid_o   = win_i.valid & win_i.write;    // write-enable
+  assign rx_ready_o   = win_i.valid & ~win_i.write;   // read-enable
+  assign addr         = win_i.addr;
+  assign tx_data_o    = win_i.wdata;
+  assign tx_be_o      = win_i.wstrb;
+  // Response: always ready, else over/underflow error reported in regfile
+  assign win_o.rdata  = rx_data_i;
+  assign win_o.error  = win_error;
+  assign win_o.ready  = 1'b1;
 
 endmodule : spi_host_window
-- 
2.16.5

