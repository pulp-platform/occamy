From 521411ca631d6c54569e7849616c4040c457d660 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Wed, 18 Aug 2021 17:42:18 +0200
Subject: [PATCH] vendor: Re-patch opentitan peripherals

---
 Bender.yml                            | 24 ++++++++++++++++++++++++
 prim_pulp_platform/prim_flop_2sync.sv | 31 +++++++++++++++++++++++++++++++
 rtl/prim_fifo_async.sv                |  2 +-
 rtl/prim_fifo_sync.sv                 |  2 +-
 rtl/prim_packer_fifo.sv               |  2 +-
 rtl/prim_sync_reqack.sv               |  2 +-
 rtl/prim_sync_reqack_data.sv          |  2 +-
 7 files changed, 60 insertions(+), 5 deletions(-)
 create mode 100644 hw/vendor/lowrisc_opentitan/prim/Bender.yml
 create mode 100644 hw/vendor/lowrisc_opentitan/prim/prim_pulp_platform/prim_flop_2sync.sv

diff --git a/Bender.yml b/Bender.yml
new file mode 100644
index 0000000..38c74dd
--- /dev/null
+++ b/Bender.yml
@@ -0,0 +1,24 @@
+package:
+  name: lowrisc_prim
+  description: "lowRISC RTL primitives"
+  authors: ["lowRISC Contributors"]
+
+# Used for implementation of primitive cells
+dependencies:
+  common_cells: {path: ../../pulp_platform_common_cells}
+
+sources:
+# Patched in
+- prim_pulp_platform/prim_flop_2sync.sv
+# Level 0
+- rtl/prim_util_pkg.sv
+# Level 1
+- rtl/prim_sync_reqack.sv
+- rtl/prim_sync_reqack_data.sv
+- rtl/prim_pulse_sync.sv
+- rtl/prim_packer_fifo.sv
+- rtl/prim_fifo_sync.sv
+- rtl/prim_filter_ctr.sv
+- rtl/prim_intr_hw.sv
+# Level 2
+- rtl/prim_fifo_async.sv
diff --git a/prim_pulp_platform/prim_flop_2sync.sv b/prim_pulp_platform/prim_flop_2sync.sv
new file mode 100644
index 0000000..6458a4a
--- /dev/null
+++ b/prim_pulp_platform/prim_flop_2sync.sv
@@ -0,0 +1,31 @@
+// Copyright 2021 ETH Zurich and University of Bologna.
+// Solderpad Hardware License, Version 0.51, see LICENSE for details.
+// SPDX-License-Identifier: SHL-0.51
+//
+// Double-synchronizer flop implementation for opentitan primitive cells
+// using cells from pulp_platform common_cells.
+
+module prim_flop_2sync #(
+  parameter int               Width      = 16,
+  parameter logic [Width-1:0] ResetValue = '0
+) (
+  input  logic clk_i,
+  input  logic rst_ni,
+  input  logic [Width-1:0] d_i,
+  output logic [Width-1:0] q_o
+);
+
+  // Note that multi-bit syncs are *almost always* a bad idea.
+  for (genvar i = 0; i < Width; ++i) begin : gen_syncs
+    sync #(
+      .STAGES     (2),
+      .ResetValue (ResetValue[i])
+    ) i_sync (
+      .clk_i,
+      .rst_ni,
+      .serial_i (d_i[i]),
+      .serial_o (q_o[i])
+    );
+  end
+
+endmodule
diff --git a/rtl/prim_fifo_async.sv b/rtl/prim_fifo_async.sv
index 97fbc58..2a99625 100644
--- a/rtl/prim_fifo_async.sv
+++ b/rtl/prim_fifo_async.sv
@@ -4,7 +4,7 @@
 //
 // Generic asynchronous fifo for use in a variety of devices.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_fifo_async #(
   parameter  int unsigned Width  = 16,
diff --git a/rtl/prim_fifo_sync.sv b/rtl/prim_fifo_sync.sv
index 77b8230..c69be23 100644
--- a/rtl/prim_fifo_sync.sv
+++ b/rtl/prim_fifo_sync.sv
@@ -4,7 +4,7 @@
 //
 // Generic synchronous fifo for use in a variety of devices.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_fifo_sync #(
   parameter int unsigned Width       = 16,
diff --git a/rtl/prim_packer_fifo.sv b/rtl/prim_packer_fifo.sv
index 472233b..f634bb2 100644
--- a/rtl/prim_packer_fifo.sv
+++ b/rtl/prim_packer_fifo.sv
@@ -39,7 +39,7 @@
 // depth_o    0000000000|1111111111|00000000000000000000000000000000000000000
 
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_packer_fifo #(
   parameter int InW  = 32,
diff --git a/rtl/prim_sync_reqack.sv b/rtl/prim_sync_reqack.sv
index b2d036a..9754f5e 100644
--- a/rtl/prim_sync_reqack.sv
+++ b/rtl/prim_sync_reqack.sv
@@ -21,7 +21,7 @@
 // For further information, see Section 8.2.4 in H. Kaeslin, "Top-Down Digital VLSI Design: From
 // Architecture to Gate-Level Circuits and FPGAs", 2015.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_sync_reqack (
   input  clk_src_i,       // REQ side, SRC domain
diff --git a/rtl/prim_sync_reqack_data.sv b/rtl/prim_sync_reqack_data.sv
index 42727e4..e1e0919 100644
--- a/rtl/prim_sync_reqack_data.sv
+++ b/rtl/prim_sync_reqack_data.sv
@@ -14,7 +14,7 @@
 // Under the hood, this module uses a prim_sync_reqack primitive for synchronizing the
 // REQ/ACK handshake. See prim_sync_reqack.sv for more details.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_sync_reqack_data #(
   parameter int unsigned Width       = 1,
-- 
2.16.5

