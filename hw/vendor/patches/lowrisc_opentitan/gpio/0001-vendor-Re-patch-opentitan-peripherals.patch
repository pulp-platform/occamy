From c997eca4b023d9ab6f419678155f61bfaef66caf Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Wed, 18 Aug 2021 17:42:18 +0200
Subject: [PATCH] vendor: Re-patch opentitan peripherals

---
 Bender.yml          |  14 +++
 data/gpio.hjson     |   4 +-
 rtl/gpio.sv         |  49 ++------
 rtl/gpio_reg_top.sv | 340 ++++++++++++++++++++++------------------------------
 4 files changed, 173 insertions(+), 234 deletions(-)
 create mode 100644 hw/vendor/lowrisc_opentitan/gpio/Bender.yml

diff --git a/Bender.yml b/Bender.yml
new file mode 100644
index 0000000..dcac4ae
--- /dev/null
+++ b/Bender.yml
@@ -0,0 +1,14 @@
+package:
+  name: lowrisc_gpio
+  description: "lowRISC GPIO"
+  authors: ["lowRISC Contributors"]
+
+dependencies:
+  lowrisc_prim: {path: ../prim}
+
+sources:
+# Level 0
+- rtl/gpio_reg_pkg.sv
+# Level 1
+- rtl/gpio_reg_top.sv
+- rtl/gpio.sv
diff --git a/data/gpio.hjson b/data/gpio.hjson
index ad5b78e..f819188 100644
--- a/data/gpio.hjson
+++ b/data/gpio.hjson
@@ -3,9 +3,9 @@
 // SPDX-License-Identifier: Apache-2.0
 {
   name: "gpio",
-  clocking: [{clock: "clk_i", reset: "rst_ni"}],
+  clock_primary: "clk_i",
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
   available_inout_list: [
     { name: "gpio",
diff --git a/rtl/gpio.sv b/rtl/gpio.sv
index 359f663..0b469c8 100644
--- a/rtl/gpio.sv
+++ b/rtl/gpio.sv
@@ -4,27 +4,24 @@
 //
 // General Purpose Input/Output module
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module gpio
   import gpio_reg_pkg::*;
 #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
 ) (
   input clk_i,
   input rst_ni,
 
-  // Bus interface
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  // Below Register interface can be changed
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Interrupts
   output logic [31:0] intr_gpio_o,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // GPIOs
   input        [31:0] cio_gpio_i,
   output logic [31:0] cio_gpio_o,
@@ -139,41 +136,20 @@ module gpio
                                event_intr_actlow |
                                event_intr_acthigh;
 
-  // Alerts
-  logic [NumAlerts-1:0] alert_test, alerts;
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   // Register module
-  gpio_reg_top u_reg (
+  gpio_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
 
-    .tl_i,
-    .tl_o,
+    .reg_req_i,
+    .reg_rsp_o,
 
     .reg2hw,
     .hw2reg,
 
-    .intg_err_o (alerts[0]),
     .devmode_i  (1'b1)
   );
 
@@ -181,6 +157,5 @@ module gpio
   `ASSERT_KNOWN(IntrGpioKnown, intr_gpio_o)
   `ASSERT_KNOWN(CioGpioEnOKnown, cio_gpio_en_o)
   `ASSERT_KNOWN(CioGpioOKnown, cio_gpio_o)
-  `ASSERT_KNOWN(AlertsKnown_A, alert_tx_o)
 
 endmodule
diff --git a/rtl/gpio_reg_top.sv b/rtl/gpio_reg_top.sv
index 7fa64ea..ec6fb54 100644
--- a/rtl/gpio_reg_top.sv
+++ b/rtl/gpio_reg_top.sv
@@ -4,20 +4,22 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
 
-module gpio_reg_top (
+`include "common_cells/assertions.svh"
+
+module gpio_reg_top #(
+    parameter type reg_req_t = logic,
+    parameter type reg_rsp_t = logic,
+    parameter int AW = 6
+) (
   input clk_i,
   input rst_ni,
-
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
   // To HW
   output gpio_reg_pkg::gpio_reg2hw_t reg2hw, // Write
   input  gpio_reg_pkg::gpio_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -25,7 +27,6 @@ module gpio_reg_top (
 
   import gpio_reg_pkg::* ;
 
-  localparam int AW = 6;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -41,141 +42,105 @@ module gpio_reg_top (
   logic          addrmiss, wr_err;
 
   logic [DW-1:0] reg_rdata_next;
-  logic reg_busy;
-
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
 
+  // Below register interface can be changed
+  reg_req_t  reg_intf_req;
+  reg_rsp_t  reg_intf_rsp;
 
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
 
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o(tl_o)
-  );
+  assign reg_intf_req = reg_req_i;
+  assign reg_rsp_o = reg_intf_rsp;
 
-  assign tl_reg_h2d = tl_i;
-  assign tl_o_pre   = tl_reg_d2h;
-
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
-
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
-
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .busy_i  (reg_busy),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
 
-  // cdc oversampling signals
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
-  logic intr_state_we;
   logic [31:0] intr_state_qs;
   logic [31:0] intr_state_wd;
-  logic intr_enable_we;
+  logic intr_state_we;
   logic [31:0] intr_enable_qs;
   logic [31:0] intr_enable_wd;
-  logic intr_test_we;
+  logic intr_enable_we;
   logic [31:0] intr_test_wd;
-  logic alert_test_we;
+  logic intr_test_we;
   logic alert_test_wd;
+  logic alert_test_we;
   logic [31:0] data_in_qs;
-  logic direct_out_re;
-  logic direct_out_we;
   logic [31:0] direct_out_qs;
   logic [31:0] direct_out_wd;
-  logic masked_out_lower_re;
-  logic masked_out_lower_we;
+  logic direct_out_we;
+  logic direct_out_re;
   logic [15:0] masked_out_lower_data_qs;
   logic [15:0] masked_out_lower_data_wd;
+  logic masked_out_lower_data_we;
+  logic masked_out_lower_data_re;
   logic [15:0] masked_out_lower_mask_wd;
-  logic masked_out_upper_re;
-  logic masked_out_upper_we;
+  logic masked_out_lower_mask_we;
   logic [15:0] masked_out_upper_data_qs;
   logic [15:0] masked_out_upper_data_wd;
+  logic masked_out_upper_data_we;
+  logic masked_out_upper_data_re;
   logic [15:0] masked_out_upper_mask_wd;
-  logic direct_oe_re;
-  logic direct_oe_we;
+  logic masked_out_upper_mask_we;
   logic [31:0] direct_oe_qs;
   logic [31:0] direct_oe_wd;
-  logic masked_oe_lower_re;
-  logic masked_oe_lower_we;
+  logic direct_oe_we;
+  logic direct_oe_re;
   logic [15:0] masked_oe_lower_data_qs;
   logic [15:0] masked_oe_lower_data_wd;
+  logic masked_oe_lower_data_we;
+  logic masked_oe_lower_data_re;
   logic [15:0] masked_oe_lower_mask_qs;
   logic [15:0] masked_oe_lower_mask_wd;
-  logic masked_oe_upper_re;
-  logic masked_oe_upper_we;
+  logic masked_oe_lower_mask_we;
+  logic masked_oe_lower_mask_re;
   logic [15:0] masked_oe_upper_data_qs;
   logic [15:0] masked_oe_upper_data_wd;
+  logic masked_oe_upper_data_we;
+  logic masked_oe_upper_data_re;
   logic [15:0] masked_oe_upper_mask_qs;
   logic [15:0] masked_oe_upper_mask_wd;
-  logic intr_ctrl_en_rising_we;
+  logic masked_oe_upper_mask_we;
+  logic masked_oe_upper_mask_re;
   logic [31:0] intr_ctrl_en_rising_qs;
   logic [31:0] intr_ctrl_en_rising_wd;
-  logic intr_ctrl_en_falling_we;
+  logic intr_ctrl_en_rising_we;
   logic [31:0] intr_ctrl_en_falling_qs;
   logic [31:0] intr_ctrl_en_falling_wd;
-  logic intr_ctrl_en_lvlhigh_we;
+  logic intr_ctrl_en_falling_we;
   logic [31:0] intr_ctrl_en_lvlhigh_qs;
   logic [31:0] intr_ctrl_en_lvlhigh_wd;
-  logic intr_ctrl_en_lvllow_we;
+  logic intr_ctrl_en_lvlhigh_we;
   logic [31:0] intr_ctrl_en_lvllow_qs;
   logic [31:0] intr_ctrl_en_lvllow_wd;
-  logic ctrl_en_input_filter_we;
+  logic intr_ctrl_en_lvllow_we;
   logic [31:0] ctrl_en_input_filter_qs;
   logic [31:0] ctrl_en_input_filter_wd;
+  logic ctrl_en_input_filter_we;
 
   // Register instances
   // R[intr_state]: V(False)
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (32'h0)
   ) u_intr_state (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (intr_state_we),
@@ -183,11 +148,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (hw2reg.intr_state.de),
-    .d      (hw2reg.intr_state.d),
+    .d      (hw2reg.intr_state.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.q),
+    .q      (reg2hw.intr_state.q ),
 
     // to register interface (read)
     .qs     (intr_state_qs)
@@ -198,11 +163,11 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_intr_enable (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (intr_enable_we),
@@ -210,11 +175,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.q),
+    .q      (reg2hw.intr_enable.q ),
 
     // to register interface (read)
     .qs     (intr_enable_qs)
@@ -232,7 +197,7 @@ module gpio_reg_top (
     .d      ('0),
     .qre    (),
     .qe     (reg2hw.intr_test.qe),
-    .q      (reg2hw.intr_test.q),
+    .q      (reg2hw.intr_test.q ),
     .qs     ()
   );
 
@@ -248,7 +213,7 @@ module gpio_reg_top (
     .d      ('0),
     .qre    (),
     .qe     (reg2hw.alert_test.qe),
-    .q      (reg2hw.alert_test.q),
+    .q      (reg2hw.alert_test.q ),
     .qs     ()
   );
 
@@ -257,19 +222,18 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (32'h0)
   ) u_data_in (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.data_in.de),
-    .d      (hw2reg.data_in.d),
+    .d      (hw2reg.data_in.d ),
 
     // to internal hardware
     .qe     (),
@@ -291,7 +255,7 @@ module gpio_reg_top (
     .d      (hw2reg.direct_out.d),
     .qre    (),
     .qe     (reg2hw.direct_out.qe),
-    .q      (reg2hw.direct_out.q),
+    .q      (reg2hw.direct_out.q ),
     .qs     (direct_out_qs)
   );
 
@@ -302,13 +266,13 @@ module gpio_reg_top (
   prim_subreg_ext #(
     .DW    (16)
   ) u_masked_out_lower_data (
-    .re     (masked_out_lower_re),
-    .we     (masked_out_lower_we),
+    .re     (masked_out_lower_data_re),
+    .we     (masked_out_lower_data_we),
     .wd     (masked_out_lower_data_wd),
     .d      (hw2reg.masked_out_lower.data.d),
     .qre    (),
     .qe     (reg2hw.masked_out_lower.data.qe),
-    .q      (reg2hw.masked_out_lower.data.q),
+    .q      (reg2hw.masked_out_lower.data.q ),
     .qs     (masked_out_lower_data_qs)
   );
 
@@ -318,12 +282,12 @@ module gpio_reg_top (
     .DW    (16)
   ) u_masked_out_lower_mask (
     .re     (1'b0),
-    .we     (masked_out_lower_we),
+    .we     (masked_out_lower_mask_we),
     .wd     (masked_out_lower_mask_wd),
     .d      (hw2reg.masked_out_lower.mask.d),
     .qre    (),
     .qe     (reg2hw.masked_out_lower.mask.qe),
-    .q      (reg2hw.masked_out_lower.mask.q),
+    .q      (reg2hw.masked_out_lower.mask.q ),
     .qs     ()
   );
 
@@ -334,13 +298,13 @@ module gpio_reg_top (
   prim_subreg_ext #(
     .DW    (16)
   ) u_masked_out_upper_data (
-    .re     (masked_out_upper_re),
-    .we     (masked_out_upper_we),
+    .re     (masked_out_upper_data_re),
+    .we     (masked_out_upper_data_we),
     .wd     (masked_out_upper_data_wd),
     .d      (hw2reg.masked_out_upper.data.d),
     .qre    (),
     .qe     (reg2hw.masked_out_upper.data.qe),
-    .q      (reg2hw.masked_out_upper.data.q),
+    .q      (reg2hw.masked_out_upper.data.q ),
     .qs     (masked_out_upper_data_qs)
   );
 
@@ -350,12 +314,12 @@ module gpio_reg_top (
     .DW    (16)
   ) u_masked_out_upper_mask (
     .re     (1'b0),
-    .we     (masked_out_upper_we),
+    .we     (masked_out_upper_mask_we),
     .wd     (masked_out_upper_mask_wd),
     .d      (hw2reg.masked_out_upper.mask.d),
     .qre    (),
     .qe     (reg2hw.masked_out_upper.mask.qe),
-    .q      (reg2hw.masked_out_upper.mask.q),
+    .q      (reg2hw.masked_out_upper.mask.q ),
     .qs     ()
   );
 
@@ -371,7 +335,7 @@ module gpio_reg_top (
     .d      (hw2reg.direct_oe.d),
     .qre    (),
     .qe     (reg2hw.direct_oe.qe),
-    .q      (reg2hw.direct_oe.q),
+    .q      (reg2hw.direct_oe.q ),
     .qs     (direct_oe_qs)
   );
 
@@ -382,13 +346,13 @@ module gpio_reg_top (
   prim_subreg_ext #(
     .DW    (16)
   ) u_masked_oe_lower_data (
-    .re     (masked_oe_lower_re),
-    .we     (masked_oe_lower_we),
+    .re     (masked_oe_lower_data_re),
+    .we     (masked_oe_lower_data_we),
     .wd     (masked_oe_lower_data_wd),
     .d      (hw2reg.masked_oe_lower.data.d),
     .qre    (),
     .qe     (reg2hw.masked_oe_lower.data.qe),
-    .q      (reg2hw.masked_oe_lower.data.q),
+    .q      (reg2hw.masked_oe_lower.data.q ),
     .qs     (masked_oe_lower_data_qs)
   );
 
@@ -397,13 +361,13 @@ module gpio_reg_top (
   prim_subreg_ext #(
     .DW    (16)
   ) u_masked_oe_lower_mask (
-    .re     (masked_oe_lower_re),
-    .we     (masked_oe_lower_we),
+    .re     (masked_oe_lower_mask_re),
+    .we     (masked_oe_lower_mask_we),
     .wd     (masked_oe_lower_mask_wd),
     .d      (hw2reg.masked_oe_lower.mask.d),
     .qre    (),
     .qe     (reg2hw.masked_oe_lower.mask.qe),
-    .q      (reg2hw.masked_oe_lower.mask.q),
+    .q      (reg2hw.masked_oe_lower.mask.q ),
     .qs     (masked_oe_lower_mask_qs)
   );
 
@@ -414,13 +378,13 @@ module gpio_reg_top (
   prim_subreg_ext #(
     .DW    (16)
   ) u_masked_oe_upper_data (
-    .re     (masked_oe_upper_re),
-    .we     (masked_oe_upper_we),
+    .re     (masked_oe_upper_data_re),
+    .we     (masked_oe_upper_data_we),
     .wd     (masked_oe_upper_data_wd),
     .d      (hw2reg.masked_oe_upper.data.d),
     .qre    (),
     .qe     (reg2hw.masked_oe_upper.data.qe),
-    .q      (reg2hw.masked_oe_upper.data.q),
+    .q      (reg2hw.masked_oe_upper.data.q ),
     .qs     (masked_oe_upper_data_qs)
   );
 
@@ -429,13 +393,13 @@ module gpio_reg_top (
   prim_subreg_ext #(
     .DW    (16)
   ) u_masked_oe_upper_mask (
-    .re     (masked_oe_upper_re),
-    .we     (masked_oe_upper_we),
+    .re     (masked_oe_upper_mask_re),
+    .we     (masked_oe_upper_mask_we),
     .wd     (masked_oe_upper_mask_wd),
     .d      (hw2reg.masked_oe_upper.mask.d),
     .qre    (),
     .qe     (reg2hw.masked_oe_upper.mask.qe),
-    .q      (reg2hw.masked_oe_upper.mask.q),
+    .q      (reg2hw.masked_oe_upper.mask.q ),
     .qs     (masked_oe_upper_mask_qs)
   );
 
@@ -444,11 +408,11 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_intr_ctrl_en_rising (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (intr_ctrl_en_rising_we),
@@ -456,11 +420,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_ctrl_en_rising.q),
+    .q      (reg2hw.intr_ctrl_en_rising.q ),
 
     // to register interface (read)
     .qs     (intr_ctrl_en_rising_qs)
@@ -471,11 +435,11 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_intr_ctrl_en_falling (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (intr_ctrl_en_falling_we),
@@ -483,11 +447,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_ctrl_en_falling.q),
+    .q      (reg2hw.intr_ctrl_en_falling.q ),
 
     // to register interface (read)
     .qs     (intr_ctrl_en_falling_qs)
@@ -498,11 +462,11 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_intr_ctrl_en_lvlhigh (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (intr_ctrl_en_lvlhigh_we),
@@ -510,11 +474,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_ctrl_en_lvlhigh.q),
+    .q      (reg2hw.intr_ctrl_en_lvlhigh.q ),
 
     // to register interface (read)
     .qs     (intr_ctrl_en_lvlhigh_qs)
@@ -525,11 +489,11 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_intr_ctrl_en_lvllow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (intr_ctrl_en_lvllow_we),
@@ -537,11 +501,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_ctrl_en_lvllow.q),
+    .q      (reg2hw.intr_ctrl_en_lvllow.q ),
 
     // to register interface (read)
     .qs     (intr_ctrl_en_lvllow_qs)
@@ -552,11 +516,11 @@ module gpio_reg_top (
 
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_ctrl_en_input_filter (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (ctrl_en_input_filter_we),
@@ -564,11 +528,11 @@ module gpio_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ctrl_en_input_filter.q),
+    .q      (reg2hw.ctrl_en_input_filter.q ),
 
     // to register interface (read)
     .qs     (ctrl_en_input_filter_qs)
@@ -620,64 +584,70 @@ module gpio_reg_top (
                (addr_hit[14] & (|(GPIO_PERMIT[14] & ~reg_be))) |
                (addr_hit[15] & (|(GPIO_PERMIT[15] & ~reg_be)))));
   end
-  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;
 
+  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_wd = reg_wdata[31:0];
-  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;
 
+  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_wd = reg_wdata[31:0];
-  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;
 
+  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_wd = reg_wdata[31:0];
-  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
 
+  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
   assign alert_test_wd = reg_wdata[0];
-  assign direct_out_re = addr_hit[5] & reg_re & !reg_error;
-  assign direct_out_we = addr_hit[5] & reg_we & !reg_error;
 
+  assign direct_out_we = addr_hit[5] & reg_we & !reg_error;
   assign direct_out_wd = reg_wdata[31:0];
-  assign masked_out_lower_re = addr_hit[6] & reg_re & !reg_error;
-  assign masked_out_lower_we = addr_hit[6] & reg_we & !reg_error;
+  assign direct_out_re = addr_hit[5] & reg_re & !reg_error;
 
+  assign masked_out_lower_data_we = addr_hit[6] & reg_we & !reg_error;
   assign masked_out_lower_data_wd = reg_wdata[15:0];
+  assign masked_out_lower_data_re = addr_hit[6] & reg_re & !reg_error;
 
+  assign masked_out_lower_mask_we = addr_hit[6] & reg_we & !reg_error;
   assign masked_out_lower_mask_wd = reg_wdata[31:16];
-  assign masked_out_upper_re = addr_hit[7] & reg_re & !reg_error;
-  assign masked_out_upper_we = addr_hit[7] & reg_we & !reg_error;
 
+  assign masked_out_upper_data_we = addr_hit[7] & reg_we & !reg_error;
   assign masked_out_upper_data_wd = reg_wdata[15:0];
+  assign masked_out_upper_data_re = addr_hit[7] & reg_re & !reg_error;
 
+  assign masked_out_upper_mask_we = addr_hit[7] & reg_we & !reg_error;
   assign masked_out_upper_mask_wd = reg_wdata[31:16];
-  assign direct_oe_re = addr_hit[8] & reg_re & !reg_error;
-  assign direct_oe_we = addr_hit[8] & reg_we & !reg_error;
 
+  assign direct_oe_we = addr_hit[8] & reg_we & !reg_error;
   assign direct_oe_wd = reg_wdata[31:0];
-  assign masked_oe_lower_re = addr_hit[9] & reg_re & !reg_error;
-  assign masked_oe_lower_we = addr_hit[9] & reg_we & !reg_error;
+  assign direct_oe_re = addr_hit[8] & reg_re & !reg_error;
 
+  assign masked_oe_lower_data_we = addr_hit[9] & reg_we & !reg_error;
   assign masked_oe_lower_data_wd = reg_wdata[15:0];
+  assign masked_oe_lower_data_re = addr_hit[9] & reg_re & !reg_error;
 
+  assign masked_oe_lower_mask_we = addr_hit[9] & reg_we & !reg_error;
   assign masked_oe_lower_mask_wd = reg_wdata[31:16];
-  assign masked_oe_upper_re = addr_hit[10] & reg_re & !reg_error;
-  assign masked_oe_upper_we = addr_hit[10] & reg_we & !reg_error;
+  assign masked_oe_lower_mask_re = addr_hit[9] & reg_re & !reg_error;
 
+  assign masked_oe_upper_data_we = addr_hit[10] & reg_we & !reg_error;
   assign masked_oe_upper_data_wd = reg_wdata[15:0];
+  assign masked_oe_upper_data_re = addr_hit[10] & reg_re & !reg_error;
 
+  assign masked_oe_upper_mask_we = addr_hit[10] & reg_we & !reg_error;
   assign masked_oe_upper_mask_wd = reg_wdata[31:16];
-  assign intr_ctrl_en_rising_we = addr_hit[11] & reg_we & !reg_error;
+  assign masked_oe_upper_mask_re = addr_hit[10] & reg_re & !reg_error;
 
+  assign intr_ctrl_en_rising_we = addr_hit[11] & reg_we & !reg_error;
   assign intr_ctrl_en_rising_wd = reg_wdata[31:0];
-  assign intr_ctrl_en_falling_we = addr_hit[12] & reg_we & !reg_error;
 
+  assign intr_ctrl_en_falling_we = addr_hit[12] & reg_we & !reg_error;
   assign intr_ctrl_en_falling_wd = reg_wdata[31:0];
-  assign intr_ctrl_en_lvlhigh_we = addr_hit[13] & reg_we & !reg_error;
 
+  assign intr_ctrl_en_lvlhigh_we = addr_hit[13] & reg_we & !reg_error;
   assign intr_ctrl_en_lvlhigh_wd = reg_wdata[31:0];
-  assign intr_ctrl_en_lvllow_we = addr_hit[14] & reg_we & !reg_error;
 
+  assign intr_ctrl_en_lvllow_we = addr_hit[14] & reg_we & !reg_error;
   assign intr_ctrl_en_lvllow_wd = reg_wdata[31:0];
-  assign ctrl_en_input_filter_we = addr_hit[15] & reg_we & !reg_error;
 
+  assign ctrl_en_input_filter_we = addr_hit[15] & reg_we & !reg_error;
   assign ctrl_en_input_filter_wd = reg_wdata[31:0];
 
   // Read data return
@@ -758,17 +728,6 @@ module gpio_reg_top (
     endcase
   end
 
-  // register busy
-  always_comb begin
-    reg_busy = '0;
-    unique case (1'b1)
-      default: begin
-        reg_busy  = '0;
-      end
-    endcase
-  end
-
-
   // Unused signal tieoff
 
   // wdata / byte enable are not always fully used
@@ -779,15 +738,6 @@ module gpio_reg_top (
   assign unused_be = ^reg_be;
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
-  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)
-
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)
-
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)
-
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
 endmodule
-- 
2.16.5

